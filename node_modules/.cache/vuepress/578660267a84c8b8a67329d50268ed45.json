{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\guide\\custom-themes.md?vue&type=template&id=5f1172da&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\guide\\custom-themes.md","mtime":1557200317042},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"自定义主题\"><a class=\"header-anchor\" href=\"#自定义主题\" aria-hidden=\"true\">#</a> 自定义主题</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>主题组件同样受到<router-link to=\"./using-vue.html#浏览器-api-访问限制\">浏览器 API 访问限制</router-link>。</p>\n</div>\n<p>VuePress 使用 Vue 单个文件组件来定制主题。要使用自定义布局，请在文档根目录下创建一个 <code>.vuepress/theme</code> 目录，然后创建一个 <code>Layout.vue</code> 文件：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ theme\n      └─ Layout.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这儿和开发一个正常的 Vue 应用程序是一样的。完全取决于你如何组织你的主题。</p>\n<h2 id=\"网站和网页元数据-site-and-page-metadata\"><a class=\"header-anchor\" href=\"#网站和网页元数据-site-and-page-metadata\" aria-hidden=\"true\">#</a> 网站和网页元数据(site and page metadata)</h2>\n<p>对于 <code>docs</code> 中的每个 <code>.md</code> 文件，<code>Layout</code>组件将只被调用一次，并且整个站点和该特定页面的元数据将分别暴露为 <code>this.$site</code> 和 <code>this.$page</code> 属性被注入到应用程序中的每个组件里。</p>\n<p>这是这个网站的 <code>$site</code> 值：</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vue-powered Static Site Generator\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524027677000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VuePress\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>title</code>，<code>description</code> 和 <code>base</code> 从 <code>.vuepress/config.js</code> 中的相应字段复制而来。 <code>pages</code> 包含每个页面的元数据对象数组，包括其路径，页面标题（在 <router-link to=\"./markdown.html#front-matter\">YAML front matter</router-link> 中显式指定或从页面上的第一个标题推断）以及该文件中的任意 YAML frontmatter 数据。</p>\n<p>这是你正在查看的此页面的 <code>$page</code> 对象：</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lastUpdated\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1524847549000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/guide/custom-themes.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"自定义主题\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果用户在 <code>.vuepress/config.js</code> 中提供 <code>themeConfig</code>，它也可以用 <code>$site.themeConfig</code>。你可以使用它来允许用户自定义主题的行为 - 例如，指定类别和页面顺序。然后，你可以将这些数据与 <code>$site.pages</code> 一起使用来动态构建导航链接。</p>\n<p>最后，别忘了 <code>this.$route</code> 和 <code>this.$router</code> 也可作为 Vue Router API 的一部分。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p><code>lastUpdated</code> 是该文件最后一次 git 提交的 UNIX 时间戳，更多详细信息请参考<router-link to=\"./../default-theme-config/#最近更新\">最近的更新</router-link>。</p>\n</div>\n<h2 id=\"内容摘要-content-excerpt\"><a class=\"header-anchor\" href=\"#内容摘要-content-excerpt\" aria-hidden=\"true\">#</a> 内容摘要(content excerpt)</h2>\n<p>如果 markdown 文件包含一个 <code>&lt;!-- more --&gt;</code> 注释，那么注释上方的任何内容都将被提取，然后暴露在 <code>$page.excerpt</code> 中。如果你正在为博客创建自定义主题，可以使用此数据来渲染带有摘要信息的文章列表。</p>\n<h2 id=\"内容出口-content-outlet\"><a class=\"header-anchor\" href=\"#内容出口-content-outlet\" aria-hidden=\"true\">#</a> 内容出口(content outlet)</h2>\n<p>所渲染的当前 <code>.md</code> 文件的编译内容将作为特殊的 <code>&lt;Content/&gt;</code> 全局组件来使用。你需要将其呈现在布局的某个位置以显示页面的内容。最简单的主题可以是一个带有以下内容的 <code>Layout.vue</code> 组件：</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>theme-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"应用级别的增强-app-level-enhancements\"><a class=\"header-anchor\" href=\"#应用级别的增强-app-level-enhancements\" aria-hidden=\"true\">#</a> 应用级别的增强(app level enhancements)</h2>\n<p>主题可以通过在主题根文件的 <code>enhanceApp.js</code> 文件来增强 VuePress 使用的 Vue 应用。该文件应该通过 <code>export default</code> 命令导出一个钩子函数，并接受一个包含了一些应用级别属性的对象作为参数。你可以使用这个钩子来安装一些附加的 Vue 插件、注册全局组件，或者增加额外的路由钩子：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  Vue<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the version of Vue being used in the VuePress app</span>\n  options<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the options for the root Vue instance</span>\n  router<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the router instance for the app</span>\n  siteData <span class=\"token comment\">// site metadata</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...apply enhancements to the app</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"从依赖中引用主题-using-theme-from-a-dependency\"><a class=\"header-anchor\" href=\"#从依赖中引用主题-using-theme-from-a-dependency\" aria-hidden=\"true\">#</a> 从依赖中引用主题(using theme from a dependency)</h2>\n<p>主题可以在 npm 上以原始 Vue SFC 格式发布为 <code>vuepress-theme-xxx</code>。</p>\n<p>要使用 npm 依赖项的主题，请在 <code>.vuepress/config.js</code> 中提供一个 <code>theme</code> 选项：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  theme<span class=\"token punctuation\">:</span> <span class=\"token string\">'awesome'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>VuePress 将尝试定位并使用 <code>node_modules/vuepress-theme-awesome/Layout.vue</code>。</p>\n<h2 id=\"自定义默认主题\"><a class=\"header-anchor\" href=\"#自定义默认主题\" aria-hidden=\"true\">#</a> 自定义默认主题</h2>\n<p><code>vuepress eject [targetDir]</code> 命令会将默认主题的源代码复制到 <code>.vuepress/theme</code> 中，来允许彻底的自定义。但是请注意，一旦你 eject，即使你升级 VuePress 版本，你这仍然是自己的主题，并且不会收到对默认主题的未来更新或错误修复。</p>\n</div>\n",null]}