{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Webpack.md?vue&type=template&id=bfc1f93e&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Webpack.md","mtime":1557200317093},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"webpack\"><a class=\"header-anchor\" href=\"#webpack\" aria-hidden=\"true\">#</a> Webpack</h1>\n<h4 id=\"_1、简介\"><a class=\"header-anchor\" href=\"#_1、简介\" aria-hidden=\"true\">#</a> 1、简介</h4>\n<ul>\n<li>模块的打包器(将多个文件打包为一个文件)</li>\n<li>自动化构建工具(和gulp类似)</li>\n<li>在webpack当中任何一个文件都需要一个loader解析文件</li>\n</ul>\n<h4 id=\"_2、能干啥？\"><a class=\"header-anchor\" href=\"#_2、能干啥？\" aria-hidden=\"true\">#</a> 2、能干啥？</h4>\n<ul>\n<li>提升网站的响应速度，减少http 请求数</li>\n</ul>\n<h5 id=\"_3-1、开始\"><a class=\"header-anchor\" href=\"#_3-1、开始\" aria-hidden=\"true\">#</a> 3_1、开始</h5>\n<p>cnpm install -g webpack</p>\n<p>cnpm install -g webpack-cli</p>\n<h5 id=\"_3-2、配置文件\"><a class=\"header-anchor\" href=\"#_3-2、配置文件\" aria-hidden=\"true\">#</a> 3_2、配置文件</h5>\n<p>默认: webpack.config.js</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>下包：\n    extract-text-webpack-plugin@next   // 样式的抽离\n\nconst path = require(&#39;path&#39;);\nconst htmlwebpackplugin = require(&#39;html-webpack-plugin&#39;); // 新建html页面\n// 将多个样式表打包为一个样式表\nconst ExtractTexPlugin = require(&#39;extract-text-webpack-plugin&#39;)  // 样式的抽离\n\nfunction entries(){\n    let temp = {};\n    let pathname = path.join(__dirname,&#39;src&#39;);\n    let files = fs.readdirSync(pathname);\n    files.map(file =&gt;{\n        let pathUrl = path.join(pathname,file);\n        ley stats = fs.statSync(pathUrl);\n        if(stats.isFile()){\n            let key = path.basename(pathUrl,&#39;.js&#39;);\n            temp[file] = pathUrl;\n        }\n    })\n}\nmodule.exports = {\n    mode:&#39;development&#39;,  // 解决警告\n    // 单入口文件\n    entry:path.join(__dirname,&#39;src/app.js&#39;),\n    // 多入口文件\n    // entry:{\n    //   app:path.join(__dirname,&#39;src/app.js&#39;),\n    //   app2:path.join(__dirname,&#39;src/app2.js&#39;)\n    // }\n    output:{\n        path:path.join(__dirname,&#39;dist&#39;),\n        filename:&#39;buildle.js&#39;\n    },\n    // webpack文件解析器，用来解析各种loader\n    module:{\n        rules:[\n            {\n                test:/\\.css$/,\n                loader:ExtractTextPlugin.extract({  // 样式的抽离\n                    fallback:&#39;style-loader&#39;,\n                    use:&#39;css-loader&#39;\n                })\n            },{\n                test:/\\.(jpg|png|gif)/,\n                loader:&#39;url-loader&#39; \n            },{\n                test:/\\.(sass|scss)$/,\n                loader:[\n                    &quot;style-loader&quot;,\n                    &quot;css-loader&quot;,\n                    &quot;sass-loader&quot;\n                ]\n            }\n        ]\n    },\n    resolve:{\n        alias:{\n            common:path.join(__dirname,&#39;src/....&#39;);\n        }\n    }\n    devServer:{ // 起服务\n        host:&quot;localhost&quot;,\n        port:8080,\n        contentBase:&#39;.&#39;,   // 基准路径  . 根目录 //本地服务器所加载的页面所在的目录\n        overlay:true, // 将错误显示在页面中\n        inline:true, // 当源文件发生改变是自动刷新页面\n        hot:true,   // 模块的热替换\n        stats:&#39;errors-only&#39;,  // 只打印错误\n        compress:true  // 当他为true时对所有的服务器资源采用gzip压缩\n        before(app){\n            app.get(&#39;/api&#39;,(req,res)=&gt;{\n                res.end()\n            }) \n        }\n    }\n    plugins:[\n        new webpack.HotModuleReplacementPlugin(), // 模块的热替换\n        new ExtractTextPlugin(&#39;common.css&#39;),  //  common.css 目标目录\n        new HtmlWebpackPlugin({    // 新建html\n            title:&quot;my first page&quot;,\n            filename:&quot;index.html&quot;,\n            template:&quot;./index.html&quot;,\n            inject:true // 默认false,true显示在body中\n            \n        })\n    ],\n    // devtool:&quot;eval-source-map&quot;   无map文件\n    devtool:&quot;cheap-source-map&quot;  // 有map的压缩文件\n}  \n\n// sass需要两个包\n// node-sass    sass-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_4、引入-抛出\"><a class=\"header-anchor\" href=\"#_4、引入-抛出\" aria-hidden=\"true\">#</a> 4、引入 抛出</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>引入: \n单：import Utils from &#39;./js/app.js&#39;\n多：import {PI,username,test} from &#39;./js&#39;;\n抛出：\n单：export default utils\n多：export const PI = 3.14;\n多：export let a = 6;\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_5、命令\"><a class=\"header-anchor\" href=\"#_5、命令\" aria-hidden=\"true\">#</a> 5、命令</h4>\n<p>webpack.optimize.commonsChunkPlugin   // 实现多个文件中公共代码的提取</p>\n<p>setup()  // 为服务的中间件,可以对请求进行拦截</p>\n<p>proxy()  // 用来做代理的，可以将请求代理到别的服务</p>\n<p>hot()  // 模块的热加载</p>\n<p>contentBase()  // 用来定义静态文件的地址</p>\n<p>webpack.ensure()  // 实现文件的懒加载</p>\n</div>\n",null]}