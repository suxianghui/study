{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\vue\\README.md?vue&type=template&id=1581a5a4&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\vue\\README.md","mtime":1557200317089},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"vue\"><a class=\"header-anchor\" href=\"#vue\" aria-hidden=\"true\">#</a> VUE</h1>\n<h4 id=\"_1、vue是什么\"><a class=\"header-anchor\" href=\"#_1、vue是什么\" aria-hidden=\"true\">#</a> 1、Vue是什么?</h4>\n<ul>\n<li>Vue是一个渐进式的javascript开发框架，通过组件的开发，最后进行组件的组合，合并组件形成页面</li>\n<li>构造器(构造函数)</li>\n<li>自动化构建工具</li>\n</ul>\n<h5 id=\"优点\"><a class=\"header-anchor\" href=\"#优点\" aria-hidden=\"true\">#</a> 优点</h5>\n<ol>\n<li>组件化开发</li>\n<li>单页面路由</li>\n<li>丰富的Api方法</li>\n<li>双向的数据绑定</li>\n<li>单向数据流</li>\n<li>易于结合其他第三库</li>\n</ol>\n<h5 id=\"缺点\"><a class=\"header-anchor\" href=\"#缺点\" aria-hidden=\"true\">#</a> 缺点</h5>\n<ol>\n<li>生态系统不够完善</li>\n<li>可扩展性稍差</li>\n</ol>\n<blockquote>\n<p>1、全局安装   npm install -g vue-cli</p>\n</blockquote>\n<blockquote>\n<p>2、创建项目 vue init webpack myprojuct</p>\n</blockquote>\n<blockquote>\n<p>3、安装依赖包 npm install</p>\n</blockquote>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>下包：\n    cnpm i --save-dev vue\n\nCDN:内容分发网络/智能虚拟网络\nv-on:click 缩写 @click\nv-on:click=&quot;alert($event)&quot; // 阻止默认行为\nv-on:click.prevent=&quot;alert&quot; // 利用修饰符阻止默认行为\n\n指令\nv-show\nv-html\nv-text\nv-bind:src=&quot;list.img&quot;  // 绑定属性  所有属性都可以\nv-for=&quot;list in lists&quot;  // 循环\n\n\n插值\n{{message}}\nv-html=&quot;message&quot;  // 可以解析html元素\nv-text=&quot;message&quot;  // 只能解析字符串\n\n&lt;div id=&quot;app&quot;&gt;\n    {{message}}\n    {{message+&quot;&quot;}} // 表达式\n    &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;\n    &lt;button v-on:click=&quot;alert&quot;&gt;点击&lt;/button&gt;\n&lt;/div&gt;\n\nlet vm = new Vue({ \n    el:&quot;#app&quot;,  // 挂载对象\n    data:{ // 实例属性    // data是一个方法返回一个对象\n        message:&quot;世界您好!&quot;\n    }, \n    beforeCreate(){   // 创建\n        // 挂载元素 实例属性 实例方法 都没有生成\n    },\n    created(){   // 创建完成\n        // 挂载元素 还是没有被初始化\n        // 实例属性 实例方法 编译出来\n    },\n    beforeMount(){  \n        // 挂载元素 初始化了，但是模板还没有被编译，原样输出\n        // 实例属性 实例方法 编译出来\n    },\n    mounted(){\n        // 挂载元素 初始化 模板被编译\n        // 属性 初始化\n        // 方法初始化\n    },\n    beforeUpdate(){\n        // 数据更新前\n    },\n    updated(){\n        // 数据更新后\n        // 当数据发生改变都会被updated捕获到\n    }\n    methods:{  // 方法\n        alert(e){\n            // e.preventDefault();\n            alert(this.message)\n        }\n    }\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2、app-vue\"><a class=\"header-anchor\" href=\"#_2、app-vue\" aria-hidden=\"true\">#</a> 2、app.vue</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>自动添加前缀\npostcss-loader\nautoprefixer\nsass-loader\n{\n    loader:&#39;postcss-loader&#39;,\n    optiond:{\n        sourceMap:true,\n        config:{\n            \n        }\n    }\n}\n\nvue init webpack-simple aaa\nvue\nvue-loader\nvue-template-compiler \nvue-style-loader\n\n&lt;template&gt;\n    &lt;div&gt;\n        &lt;h1 v-bind:style=&quot;{fontSize:&#39;12px&#39;}&quot;&gt;绑定样式&lt;/h1&gt; // 直接赋值形式\n        &lt;h2 v-bind:style=&quot;styleObj&quot;&gt;绑定样式&lt;/h2&gt; // 对象形式\n        &lt;h3 v-bind:style=&quot;[obj1,obj2]&quot;&gt;绑定样式&lt;/h3&gt;  // 数组形式\n        \n        &lt;p v-bind:class=&quot;[&#39;text-res&#39;:true]&quot;&gt;绑定类&lt;/p&gt;  // 数组形式\n    &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n    export default:{\n        name:&#39;app&#39;,\n        data(){\n            return{\n                styleObj:{\n                    fontSize:&quot;20px&quot;,\n                    color:&quot;red&quot;\n                },\n                obj1:{\n                    color:&quot;#dec&quot;\n                },\n                 obj2:{\n                    color:&quot;green&quot;\n                }\n            }\n        },\n        computed:{\n            // computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter\n            sum(){\n                return Number(this.vall)+Number(this.val2)\n            }\n        },\n        watch:{ // 监听新值和旧值\n            slogin(){\n                \n            }\n        }\n    }\n&lt;/script&gt;\n&lt;style scoped&gt; // 只在当前作用域里生效\n    .text-red{\n        color:red;\n    }\n&lt;/style&gt;\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3、ajax\"><a class=\"header-anchor\" href=\"#_3、ajax\" aria-hidden=\"true\">#</a> 3、ajax</h4>\n<ul>\n<li>axios</li>\n</ul>\n<h4 id=\"_4、取dom元素\"><a class=\"header-anchor\" href=\"#_4、取dom元素\" aria-hidden=\"true\">#</a> 4、取dom元素</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>  ref=&quot;aaa&quot;   this.$refs.aaa\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_6、轮播图-element-ui\"><a class=\"header-anchor\" href=\"#_6、轮播图-element-ui\" aria-hidden=\"true\">#</a> 6、轮播图 element-ui</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>main.js\nimport Element from &#39;element-ui&#39;\n\nVue.use(Element)\n\n页面\n&lt;el-carousel :interval=&quot;3000&quot;&gt;\n    &lt;el-carousel-item v-for=&quot;(list,ind) in Imgs&quot; :key=&quot;ind&quot;&gt;\n        &lt;img :src=&quot;list.picUrl&quot; class=&quot;img_res&quot;&gt;\n    &lt;/el-carousel-item&gt;\n&lt;/el-carousel&gt;\n\nstyle\n @import url(&#39;element-ui/lib/theme-chalk/index.css&#39;);\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_7、mock\"><a class=\"header-anchor\" href=\"#_7、mock\" aria-hidden=\"true\">#</a> 7、mock</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>下包：\n    mock-axios-adapter\n\nimport mockjs from &#39;mockjs&#39;;\nimport axios from &#39;axios&#39;;\nimport axiosAdapter from &#39;mock-axios-adapter&#39;  // 拦截axios请求\n\n\nconst mock = new axiosAdapter(axios);\n\nmock.onGet(&#39;地址&#39;).reply(200,{\n    errCode:0,\n    errMsg:&#39;&#39;,\n    result:[{\n        url:&#39;./static/img/banner.jpg&#39;\n    }]\n})\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_8、vue-lazyload\"><a class=\"header-anchor\" href=\"#_8、vue-lazyload\" aria-hidden=\"true\">#</a> 8、vue-lazyload</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>1、安装插件\nnpm install vue-lazyload --save-dev\n\n2. main.js引入插件：\nimport VueLazyLoad from &#39;vue-lazyload&#39;\nVue.use(VueLazyLoad,{\n    error:&#39;./static/error.png&#39;,\n    loading:&#39;./static/loading.png&#39;\n})\n\n3. vue文件中将需要懒加载的图片绑定 v-bind:src 修改为 v-lazy \n&lt;img class=&quot;item-pic&quot; v-lazy=&quot;newItem.picUrl&quot;/&gt;\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_9、插槽\"><a class=\"header-anchor\" href=\"#_9、插槽\" aria-hidden=\"true\">#</a> 9、插槽</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&lt;slot&gt;&lt;/slot&gt;\n\n两端对齐：\nvertival-align:sub\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_10、缓存页面\"><a class=\"header-anchor\" href=\"#_10、缓存页面\" aria-hidden=\"true\">#</a> 10、缓存页面</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>用这个标签包裹起来\n\n&lt;keep-alive&gt;\n    &lt;router-view/&gt;\n&lt;/keep-alive&gt;\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_11、事件修饰符\"><a class=\"header-anchor\" href=\"#_11、事件修饰符\" aria-hidden=\"true\">#</a> 11、事件修饰符</h4>\n<blockquote>\n<p>.stop\n.prevent\n.capture\n.self\n.once</p>\n</blockquote>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&lt;!-- 阻止单击事件冒泡 --&gt;\n&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;\n&lt;!-- 提交事件不再重载页面 --&gt;\n&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;\n&lt;!-- 修饰符可以串联  --&gt;\n&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;\n&lt;!-- 只有修饰符 --&gt;\n&lt;form v-on:submit.prevent&gt;&lt;/form&gt;\n&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;\n&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;\n&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;\n&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;\n\n&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;\n&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_12、按键修饰符\"><a class=\"header-anchor\" href=\"#_12、按键修饰符\" aria-hidden=\"true\">#</a> 12、按键修饰符</h4>\n<p>.enter</p>\n<p>.tab</p>\n<p>.delete (捕获 &quot;删除&quot; 和 &quot;退格&quot; 键)</p>\n<p>.esc</p>\n<p>.space</p>\n<p>.up</p>\n<p>.down</p>\n<p>.left  // 检测鼠标左键</p>\n<p>.right</p>\n<p>.ctrl</p>\n<p>.alt</p>\n<p>.shift</p>\n<p>.meta</p>\n<h4 id=\"_13、表单修饰符\"><a class=\"header-anchor\" href=\"#_13、表单修饰符\" aria-hidden=\"true\">#</a> 13、表单修饰符</h4>\n<ul>\n<li>.lazy</li>\n<li>.number</li>\n<li>.trim</li>\n</ul>\n</div>\n",null]}