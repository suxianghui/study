{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\chain\\redux中间件.md?vue&type=template&id=c887d888&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\chain\\redux中间件.md","mtime":1557200317056},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"redux中间件\"><a class=\"header-anchor\" href=\"#redux中间件\" aria-hidden=\"true\">#</a> Redux中间件</h1>\n<h5 id=\"_1、applymiddleware\"><a class=\"header-anchor\" href=\"#_1、applymiddleware\" aria-hidden=\"true\">#</a> 1、applyMiddleware</h5>\n<ul>\n<li>方便调试，实时触发，线下使用</li>\n</ul>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>import {createStore，applyMiddleware} from &#39;redux&#39;;\nimport reducers from &#39;./reducers&#39;;\nimport Logger from &#39;redux-logger&#39;;\n\nexport default createStore(reducers, applyMiddleware(Logger))\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"_2、redux-thunk\"><a class=\"header-anchor\" href=\"#_2、redux-thunk\" aria-hidden=\"true\">#</a> 2、redux-thunk</h5>\n<ul>\n<li>目的：异步解决方案</li>\n<li>支持action的写法有对象变为函数</li>\n<li>可以发送多个dispatch</li>\n<li>改变action</li>\n<li>同时会帮我们注入两个参数dispatch和getState</li>\n<li>在异步操作完成之后再触发dispatch操作</li>\n</ul>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>dispatch((dispatch, getState)=&gt;{\n    // getState可以获取全局的state\n    dispatch({\n        type:&quot;START&quot;\n    })\n    fetch(&#39;/data.json&#39;)\n    .then(res=&gt;res.json())\n    .then(success=&gt;{\n        if(success){\n            dispatch({\n                type:&quot;FETCH_LIST&quot;,\n                payLoad:success.arr\n            })\n        }else{\n            dispatch({\n                type:&quot;FETCH_TAIL&quot;\n            })\n        }\n    })\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><h5 id=\"_3、redux-saga\"><a class=\"header-anchor\" href=\"#_3、redux-saga\" aria-hidden=\"true\">#</a> 3、redux-saga</h5>\n<ul>\n<li>拦截请求</li>\n<li>解决异步</li>\n<li>不会改变action</li>\n<li>take 拦截</li>\n<li>takeEvery 每次都拦截</li>\n</ul>\n<h5 id=\"_4、redux-thunk\"><a class=\"header-anchor\" href=\"#_4、redux-thunk\" aria-hidden=\"true\">#</a> 4、redux-thunk</h5>\n<ul>\n<li>改写action</li>\n</ul>\n</div>\n",null]}