{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\chain\\MVVM.md?vue&type=template&id=72903912&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\chain\\MVVM.md","mtime":1557200317052},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"mvvm\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#mvvm\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" MVVM\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"_1、mvvm是什么？\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_1、mvvm是什么？\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 1、MVVM是什么？\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"MVVM是Model-View-ViewModel的简写\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"它本质上是MVC 的改进版\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"MVVM（Model-View-ViewModel）框架的由来是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"_2、mvvm优点\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_2、mvvm优点\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 2、MVVM优点\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"blockquote\", [\n            _c(\"p\", [\n              _vm._v(\n                \"MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点\"\n              )\n            ])\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _c(\"strong\", [_vm._v(\"低耦合\")]),\n          _vm._v(\n            '：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的\"View\"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变'\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"strong\", [_vm._v(\"可重用性\")]),\n          _vm._v(\n            \"：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"strong\", [_vm._v(\"独立开发\")]),\n          _vm._v(\n            \"：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"strong\", [_vm._v(\"可测试\")]),\n          _vm._v(\"：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写\")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}