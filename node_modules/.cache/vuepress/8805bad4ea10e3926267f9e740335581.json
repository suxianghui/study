{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\miniapp\\小程序组件.md?vue&type=template&id=437c9365&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\miniapp\\小程序组件.md","mtime":1557200317077},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"小程序组件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#小程序组件\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 小程序组件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h5\", { attrs: { id: \"什么是组件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#什么是组件\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 什么是组件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"组件就是将一个功能进行封装，组件是视图层的基本组成单元，有自己独特的功能\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h5\", { attrs: { id: \"组件的规范\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#组件的规范\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 组件的规范\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"结构\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"样式\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"逻辑\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"通信方式\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"生命周期\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"可组合（可以嵌套）\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"定义组件\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"调用组件（标签的形式）\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h5\", { attrs: { id: \"组件的创建\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#组件的创建\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 组件的创建\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"1.小程序中组件由4个文件组成，.json .wxmll .wxss .js\\n2.创建组件实例需要通过Compoent(Object) 函数创建\\n3.创建组件需要在组件的json文件中定义  component:true 字段指定为一个组件\\n4.组件中的基础选项\\n    (1)Properties: 接受的数据\\n    (2)Data: 内部数据\\n    (3)Methods: 处理函数\\n5.使用组件\\n6.需要在对应的页面或者组件的json文件中定义 usingComponents: {} 选项\\n    usingComponets: {\\n        '名-称': '组件路径'    \\n    }\\n7.在页面中可以实用  <名-称/>\\n8.名称中不能出现大写字母，规则就是(字母_-)\\n9.组件的组合可以实用slot插槽来完成，和vue一样，只不过没有作用域插槽， 可以有命名插槽和默认插槽\\n10.组件的通信可以通过props传递参数(父子)， 自定义事件（子父）\\n    (1)父子 <my-component test=”ssss” />\\n    (2)子父 <my-component bindtest=”testFn” />  组件内部通过this.triggerEvent(‘test’, {detail:对象})\\n\"\n            )\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}