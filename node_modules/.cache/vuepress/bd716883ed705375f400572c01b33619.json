{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\chain\\Vue.md?vue&type=template&id=e9c66ce6&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\chain\\Vue.md","mtime":1557200317054},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"vue\"><a class=\"header-anchor\" href=\"#vue\" aria-hidden=\"true\">#</a> Vue</h1>\n<p>很多人面试会问啥 vue 实现原理，但我觉得这略过分，有多少人会老老实实看过它的源码。但我觉得面者这也只是知道 vue 双向绑定的原理吧。</p>\n<ul>\n<li>发布者-订阅者模式（backbone.js）</li>\n</ul>\n<p>一般通过 sub, pub 的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)，这种方式现在毕竟太 low 了，我们更希望通过 vm.property = value 这种方式更新数据，同时自动更新视图，于是有了下面两种方式</p>\n<ul>\n<li>脏值检查（angular.js）\nangular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：</li>\n</ul>\n<blockquote>\n<ul>\n<li>DOM 事件，譬如用户输入文本，点击按钮等( ng-click )</li>\n<li>XHR 响应事件 ( $http )</li>\n<li>浏览器 Location 变更事件 ( $location )</li>\n<li>Timer 事件( $timeout , $interval )</li>\n<li>执行 $digest() 或 $apply()</li>\n</ul>\n</blockquote>\n<ul>\n<li>数据劫持（vue.js）</li>\n</ul>\n<p>vue.js[2.0] 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\nvue.js[3.0]采取了 proxy 的方式</p>\n<h2 id=\"es6\"><a class=\"header-anchor\" href=\"#es6\" aria-hidden=\"true\">#</a> ES6</h2>\n<h2 id=\"promise\"><a class=\"header-anchor\" href=\"#promise\" aria-hidden=\"true\">#</a> Promise</h2>\n<ul>\n<li>是异步编程的一种解决方案</li>\n<li>是一个对象</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ol>\n<li>无法取消</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>Promise.all()  会包装多个实例成为一个新的promise实例\n\nnew Promise((resolve.reject) =&gt;{\n    // do some async function\n    if(true){\n        // resolve 代表成功的回调\n        resolve(data);\n    }else{\n        // reject 代表失败的回调\n        reject(data);\n    }\n})\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3、异步加载图片\"><a class=\"header-anchor\" href=\"#_3、异步加载图片\" aria-hidden=\"true\">#</a> 3、异步加载图片</h4>\n<ol>\n<li>数据请求 -&gt; 接口(Interface)</li>\n<li>创建图片</li>\n<li>插入到页面当中</li>\n</ol>\n<h4 id=\"_4、继承\"><a class=\"header-anchor\" href=\"#_4、继承\" aria-hidden=\"true\">#</a> 4、继承</h4>\n<p>obj1 extends obj2</p>\n<p>如果继承就一定要在contructor第一行加super()方法</p>\n<h4 id=\"_5、异步加载\"><a class=\"header-anchor\" href=\"#_5、异步加载\" aria-hidden=\"true\">#</a> 5、异步加载</h4>\n<ol>\n<li>ajax</li>\n<li>加载图片</li>\n<li>jsonp</li>\n</ol>\n<h4 id=\"_6、语法糖\"><a class=\"header-anchor\" href=\"#_6、语法糖\" aria-hidden=\"true\">#</a> 6、语法糖</h4>\n<p>再不改变代码的情况下让代码更简洁</p>\n<h4 id=\"_7、async\"><a class=\"header-anchor\" href=\"#_7、async\" aria-hidden=\"true\">#</a> 7、async</h4>\n<ol>\n<li>内置执行器</li>\n<li>更好的语义</li>\n<li>更广的适用性</li>\n<li>返回Promise</li>\n</ol>\n<h2 id=\"vuex\"><a class=\"header-anchor\" href=\"#vuex\" aria-hidden=\"true\">#</a> vuex</h2>\n</div>\n",null]}