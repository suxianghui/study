{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\guide\\using-vue.md?vue&type=script&lang=js&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\guide\\using-vue.md","mtime":1557200317046},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  mounted: function mounted() {\n    document.querySelector(\".\".concat(this.$style.example)).textContent = '这是通过内联脚本中的内嵌 CSS 样式渲染的。';\n  }\n};",{"version":3,"sources":["using-vue.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA,eAAA;AACA,SADA,qBACA;AACA,aAAA,aAAA,YAAA,KAAA,MAAA,CAAA,OAAA,GACA,WADA,GACA,yBADA;AAEA;AAJA,CAAA","sourcesContent":["<template>\n<div class=\"content\"><h1 id=\"在-markdown-中使用-vue\"><a class=\"header-anchor\" href=\"#在-markdown-中使用-vue\" aria-hidden=\"true\">#</a> 在 Markdown 中使用 Vue</h1>\n<h2 id=\"浏览器-api-访问限制\"><a class=\"header-anchor\" href=\"#浏览器-api-访问限制\" aria-hidden=\"true\">#</a> 浏览器 API 访问限制</h2>\n<p>由于 VuePress 应用程序在生成静态构建文件时，会通过 Node.js 进行服务器端渲染，所以任何 Vue 用法都必须符合 <a href=\"https://ssr.vuejs.org/zh/guide/universal.html\" target=\"_blank\" rel=\"noopener noreferrer\">编写通用代码<OutboundLink/></a> 的要求。简而言之，确保只在 <code>beforeMounted</code> 或 <code>mounted</code> 钩子函数中访问 浏览器特定 API / DOM API。</p>\n<p>如果你正在使用或展示一个对于 SSR 不友好的组件（比如说包含了自定义指令），则可以将它们包装在内置的 <code>&lt;ClientOnly&gt;</code> 组件中：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NonSSRFriendlyComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>请注意，这无法解决一些组件或库在**静态导入(import)**时就试图访问浏览器 API 的问题 - 为了使用在导入时使用浏览器环境的代码，你需要在合适的生命周期钩子函数中，动态导入(dynamically import)它们：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib-that-access-window-on-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// use code</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"模板-templating\"><a class=\"header-anchor\" href=\"#模板-templating\" aria-hidden=\"true\">#</a> 模板(templating)</h2>\n<h3 id=\"插值\"><a class=\"header-anchor\" href=\"#插值\" aria-hidden=\"true\">#</a> 插值</h3>\n<p>每个 markdown 文件首先被编译成 HTML，然后作为 Vue 组件传递给 <code>vue-loader</code>。这意味着你可以在文本中使用 Vue 风格的插值表达式：</p>\n<p><strong>输入</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ 1 + 1 }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>输出</strong></p>\n<pre><code>{{ 1 + 1 }}</code></pre>\n<h3 id=\"指令\"><a class=\"header-anchor\" href=\"#指令\" aria-hidden=\"true\">#</a> 指令</h3>\n<p>也可以运行指令：</p>\n<p><strong>输入</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>i in 3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ i }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>输出</strong></p>\n<pre><code><span v-for=\"i in 3\">{{ i }} </span></code></pre>\n<h3 id=\"访问网站和页面数据\"><a class=\"header-anchor\" href=\"#访问网站和页面数据\" aria-hidden=\"true\">#</a> 访问网站和页面数据</h3>\n<p>编译后的组件没有任何私有数据，但是我们可以访问到 <router-link to=\"./custom-themes.html#网站和网页元数据-site-and-page-metadata\">网站元数据</router-link>。例如：</p>\n<p><strong>输入</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ $page }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>输出</strong></p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/using-vue.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using Vue in Markdown\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"转义-escaping\"><a class=\"header-anchor\" href=\"#转义-escaping\" aria-hidden=\"true\">#</a> 转义(escaping)</h2>\n<p>默认情况下，花括号代码块(fenced code blocks)会自动用 <code>v-pre</code> 包装。如果要在内联代码片段或纯文本内显示原始插值或特定于 Vue 的语法，则需要把段落包裹在 <code>v-pre</code> 自定义容器中：</p>\n<p><strong>输入</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>::: v-pre\n<span class=\"token code keyword\">`{{ This will be displayed as-is }}`</span>\n:::\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>输出</strong></p>\n<div v-pre>\n<p><code>{{ This will be displayed as-is }}</code></p>\n</div>\n<h2 id=\"使用组件（using-components）\"><a class=\"header-anchor\" href=\"#使用组件（using-components）\" aria-hidden=\"true\">#</a> 使用组件（Using Components）</h2>\n<p><code>.vuepress/components</code> 中的所有 <code>*.vue</code> 文件都会自动注册为 <a href=\"https://vuejs.org/v2/guide/components-registration.html#Global-Registration\" target=\"_blank\" rel=\"noopener noreferrer\">全局(global)<OutboundLink/></a><a href=\"https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\" target=\"_blank\" rel=\"noopener noreferrer\">异步(async)<OutboundLink/></a> 组件。例如：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ components\n      ├─ demo-1.vue\n      ├─ OtherComponent.vue\n      └─ Foo\n         └─ Bar.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在所有 markdown 文件中，你都可以直接使用这些组件（其名称(name)是从文件名推断出的）：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>demo-1</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Foo-Bar</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><demo-1></demo-1>\n<OtherComponent/>\n<Foo-Bar/>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">重要</p>\n<p>确保自定义组件的名称，是由连字符(hyphen)拼接，或者遵循帕斯卡命名(PascalCase)。否则，它将被视为内联元素，然后被包裹在一个 <code>&lt;p&gt;</code> 标签内，这将导致 hydration 无法匹配，这是因为 <code>&lt;p&gt;</code> 中不允许放置块元素。（译注：查看 <a href=\"https://ssr.vuejs.org/zh/guide/hydration.html\" target=\"_blank\" rel=\"noopener noreferrer\">SSR 客户端激活(client-side hydration)<OutboundLink/></a>）</p>\n</div>\n<h2 id=\"在标题中使用-vue-组件\"><a class=\"header-anchor\" href=\"#在标题中使用-vue-组件\" aria-hidden=\"true\">#</a> 在标题中使用 Vue 组件</h2>\n<p>你可以在标题中使用 Vue 组件，但是请注意以下两种方式的不同：</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>输出的 HTML</th>\n<th>解析后的标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre v-pre><code> # text &lt;Tag/&gt; </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td><pre v-pre><code> # text `&lt;Tag/&gt;` </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td>\n<td><code>text &lt;Tag/&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>被 <code>&lt;code&gt;</code> 包装的 HTML 将按原样显示，只有未被包装的 HTML 才会被 Vue 解析。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>输出的 HTML 由 <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it<OutboundLink/></a> 完成。而解析后的标题由 VuePress 完成，用于<router-link to=\"./../default-theme-config/#侧边栏\">侧边栏</router-link>以及文档的标题。</p>\n</div>\n<h2 id=\"使用预处理器\"><a class=\"header-anchor\" href=\"#使用预处理器\" aria-hidden=\"true\">#</a> 使用预处理器</h2>\n<p>VuePress 已经为如下预处理器内置了相关的 webpack 配置：<code>sass</code>, <code>scss</code>, <code>less</code>, <code>stylus</code> 和 <code>pug</code>。要使用它们，你只需要在项目中安装对应的依赖即可。例如，要使用 <code>sass</code>，直接在项目中安装：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D sass-loader node-sass\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>接着，你就可以在 markdown 或者主题组件中使用如下代码：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n.title\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用 <code>&lt;template lang=&quot;pug&quot;&gt;</code> 需要安装 <code>pug</code> 和 <code>pug-plain-loader</code>：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D pug pug-plain-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>如果你是 Stylus 用户，那么不需要在项目中安装 <code>stylus</code> 和 <code>stylus-loader</code>，因为 VuePress 内部已经使用了 Stylus。</p>\n<p>对于没有内置 webpack 配置支持的预处理器，除了安装必要的依赖外，还需要 <router-link to=\"./../config/#configurewebpack\">扩展内部 webpack 配置</router-link>。</p>\n</div>\n<h2 id=\"脚本和样式提升\"><a class=\"header-anchor\" href=\"#脚本和样式提升\" aria-hidden=\"true\">#</a> 脚本和样式提升</h2>\n<p>有时候，你可能只需要当前页面应用一些 JavaScript 或 CSS。在这些情况下，你可以在 markdown 文件中，直接编写根级别的 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签，它们会从编译后的 HTML 中提取出来，并作为生成的 Vue 单文件组件的 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签。</p>\n<p class=\"demo\" :class=\"$style.example\"></p>\n<h2 id=\"内置组件\"><a class=\"header-anchor\" href=\"#内置组件\" aria-hidden=\"true\">#</a> 内置组件</h2>\n<h3 id=\"outboundlink\"><a class=\"header-anchor\" href=\"#outboundlink\" aria-hidden=\"true\">#</a> OutboundLink <Badge text=\"stable\"/></h3>\n<p>(<OutboundLink/>) 用于表示这是一个外部链接。在 VuePress 中，每个外部链接后面，都跟着一个这样的组件。</p>\n<h3 id=\"clientonly\"><a class=\"header-anchor\" href=\"#clientonly\" aria-hidden=\"true\">#</a> ClientOnly <Badge text=\"stable\"/></h3>\n<p>参考 <a href=\"#browser-api-access-restrictions\">浏览器 API 访问限制</a>。</p>\n<h3 id=\"content\"><a class=\"header-anchor\" href=\"#content\" aria-hidden=\"true\">#</a> Content <Badge text=\"beta\" type=\"warn\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>custom</code> - boolean</li>\n</ul>\n</li>\n<li>\n<p><strong>用法</strong>：</p>\n</li>\n</ul>\n<p>当前 <code>.md</code> 文件的编译后内容，会在这里进行渲染。当你使用 <router-link to=\"./../default-theme-config/#自定义页面的-class\">自定义布局</router-link> 时，这将非常有用。</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>也可以参考：</strong></p>\n<ul>\n<li><router-link to=\"./custom-themes.html#内容出口-content-outlet\">自定义主题 &gt; 获取渲染内容</router-link></li>\n</ul>\n<h3 id=\"badge\"><a class=\"header-anchor\" href=\"#badge\" aria-hidden=\"true\">#</a> Badge <Badge text=\"beta\" type=\"warn\"/> <Badge text=\"0.10.1+\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>text</code> - string</li>\n<li><code>type</code> - string, 可选值：<code>&quot;tip&quot;|&quot;warn&quot;|&quot;error&quot;</code>, 默认值是：<code>&quot;tip&quot;</code>.</li>\n<li><code>vertical</code> - string, 可选值：<code>&quot;top&quot;|&quot;middle&quot;</code>, 默认值是：<code>&quot;top&quot;</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>用法</strong>：</p>\n</li>\n</ul>\n<p>这个组件可以用在标题文本的末尾，用来为某些 API 添加一些状态：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token title important\"><span class=\"token punctuation\">###</span> Badge &lt;Badge text=\"beta\" type=\"warn\"/> &lt;Badge text=\"0.10.1+\"/></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>也可以参考：</strong></p>\n<ul>\n<li><a href=\"#%E5%9C%A8%E6%A0%87%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8-vue-%E7%BB%84%E4%BB%B6\">在标题中使用 Vue 组件</a></li>\n</ul>\n</div>\n</template>\n<style module>\n.example {\n  color: #41b883;\n}\n</style>\n\n<script>\nexport default {\n  mounted () {\n    document.querySelector(`.${this.$style.example}`)\n      .textContent = '这是通过内联脚本中的内嵌 CSS 样式渲染的。'\n  }\n}\n</script>\n"],"sourceRoot":"src/guide"}]}