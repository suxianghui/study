{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\1\\实训一\\study\\study\\lib\\default-theme\\Layout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\lib\\default-theme\\Layout.vue","mtime":1557200316949},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\babel-loader\\lib\\index.js","mtime":1526583314000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Vue from 'vue'\r\nimport nprogress from 'nprogress'\r\nimport Home from './Home.vue'\r\nimport Navbar from './Navbar.vue'\r\nimport Page from './Page.vue'\r\nimport Sidebar from './Sidebar.vue'\r\nimport SWUpdatePopup from './SWUpdatePopup.vue'\r\nimport { resolveSidebarItems } from './util'\r\n\r\nexport default {\r\n  components: { Home, Page, Sidebar, Navbar, SWUpdatePopup },\r\n\r\n  data () {\r\n    return {\r\n      isSidebarOpen: false,\r\n      swUpdateEvent: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    shouldShowNavbar () {\r\n      const { themeConfig } = this.$site\r\n      const { frontmatter } = this.$page\r\n      if (\r\n        frontmatter.navbar === false ||\r\n        themeConfig.navbar === false) {\r\n        return false\r\n      }\r\n      return (\r\n        this.$title ||\r\n        themeConfig.logo ||\r\n        themeConfig.repo ||\r\n        themeConfig.nav ||\r\n        this.$themeLocaleConfig.nav\r\n      )\r\n    },\r\n\r\n    shouldShowSidebar () {\r\n      const { frontmatter } = this.$page\r\n      return (\r\n        !frontmatter.layout &&\r\n        !frontmatter.home &&\r\n        frontmatter.sidebar !== false &&\r\n        this.sidebarItems.length\r\n      )\r\n    },\r\n\r\n    sidebarItems () {\r\n      return resolveSidebarItems(\r\n        this.$page,\r\n        this.$route,\r\n        this.$site,\r\n        this.$localePath\r\n      )\r\n    },\r\n\r\n    pageClasses () {\r\n      const userPageClass = this.$page.frontmatter.pageClass\r\n      return [\r\n        {\r\n          'no-navbar': !this.shouldShowNavbar,\r\n          'sidebar-open': this.isSidebarOpen,\r\n          'no-sidebar': !this.shouldShowSidebar\r\n        },\r\n        userPageClass\r\n      ]\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    window.addEventListener('scroll', this.onScroll)\r\n\r\n    // configure progress bar\r\n    nprogress.configure({ showSpinner: false })\r\n\r\n    this.$router.beforeEach((to, from, next) => {\r\n      if (to.path !== from.path && !Vue.component(to.name)) {\r\n        nprogress.start()\r\n      }\r\n      next()\r\n    })\r\n\r\n    this.$router.afterEach(() => {\r\n      nprogress.done()\r\n      this.isSidebarOpen = false\r\n    })\r\n\r\n    this.$on('sw-updated', this.onSWUpdated)\r\n  },\r\n\r\n  methods: {\r\n    toggleSidebar (to) {\r\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen\r\n    },\r\n\r\n    // side swipe\r\n    onTouchStart (e) {\r\n      this.touchStart = {\r\n        x: e.changedTouches[0].clientX,\r\n        y: e.changedTouches[0].clientY\r\n      }\r\n    },\r\n\r\n    onTouchEnd (e) {\r\n      const dx = e.changedTouches[0].clientX - this.touchStart.x\r\n      const dy = e.changedTouches[0].clientY - this.touchStart.y\r\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\r\n        if (dx > 0 && this.touchStart.x <= 80) {\r\n          this.toggleSidebar(true)\r\n        } else {\r\n          this.toggleSidebar(false)\r\n        }\r\n      }\r\n    },\r\n\r\n    onSWUpdated (e) {\r\n      this.swUpdateEvent = e\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Layout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Layout.vue","sourceRoot":"lib/default-theme","sourcesContent":["<template>\r\n  <div\r\n    class=\"theme-container\"\r\n    :class=\"pageClasses\"\r\n    @touchstart=\"onTouchStart\"\r\n    @touchend=\"onTouchEnd\"\r\n  >\r\n    <Navbar\r\n      v-if=\"shouldShowNavbar\"\r\n      @toggle-sidebar=\"toggleSidebar\"\r\n    />\r\n\r\n    <div\r\n      class=\"sidebar-mask\"\r\n      @click=\"toggleSidebar(false)\"\r\n    ></div>\r\n\r\n    <Sidebar\r\n      :items=\"sidebarItems\"\r\n      @toggle-sidebar=\"toggleSidebar\"\r\n    >\r\n      <slot\r\n        name=\"sidebar-top\"\r\n        slot=\"top\"\r\n      />\r\n      <slot\r\n        name=\"sidebar-bottom\"\r\n        slot=\"bottom\"\r\n      />\r\n    </Sidebar>\r\n\r\n    <div\r\n      class=\"custom-layout\"\r\n      v-if=\"$page.frontmatter.layout\"\r\n    >\r\n      <component :is=\"$page.frontmatter.layout\"/>\r\n    </div>\r\n\r\n    <Home v-else-if=\"$page.frontmatter.home\"/>\r\n\r\n    <Page\r\n      v-else\r\n      :sidebar-items=\"sidebarItems\"\r\n    >\r\n      <slot\r\n        name=\"page-top\"\r\n        slot=\"top\"\r\n      />\r\n      <slot\r\n        name=\"page-bottom\"\r\n        slot=\"bottom\"\r\n      />\r\n    </Page>\r\n\r\n    <SWUpdatePopup :updateEvent=\"swUpdateEvent\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from 'vue'\r\nimport nprogress from 'nprogress'\r\nimport Home from './Home.vue'\r\nimport Navbar from './Navbar.vue'\r\nimport Page from './Page.vue'\r\nimport Sidebar from './Sidebar.vue'\r\nimport SWUpdatePopup from './SWUpdatePopup.vue'\r\nimport { resolveSidebarItems } from './util'\r\n\r\nexport default {\r\n  components: { Home, Page, Sidebar, Navbar, SWUpdatePopup },\r\n\r\n  data () {\r\n    return {\r\n      isSidebarOpen: false,\r\n      swUpdateEvent: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    shouldShowNavbar () {\r\n      const { themeConfig } = this.$site\r\n      const { frontmatter } = this.$page\r\n      if (\r\n        frontmatter.navbar === false ||\r\n        themeConfig.navbar === false) {\r\n        return false\r\n      }\r\n      return (\r\n        this.$title ||\r\n        themeConfig.logo ||\r\n        themeConfig.repo ||\r\n        themeConfig.nav ||\r\n        this.$themeLocaleConfig.nav\r\n      )\r\n    },\r\n\r\n    shouldShowSidebar () {\r\n      const { frontmatter } = this.$page\r\n      return (\r\n        !frontmatter.layout &&\r\n        !frontmatter.home &&\r\n        frontmatter.sidebar !== false &&\r\n        this.sidebarItems.length\r\n      )\r\n    },\r\n\r\n    sidebarItems () {\r\n      return resolveSidebarItems(\r\n        this.$page,\r\n        this.$route,\r\n        this.$site,\r\n        this.$localePath\r\n      )\r\n    },\r\n\r\n    pageClasses () {\r\n      const userPageClass = this.$page.frontmatter.pageClass\r\n      return [\r\n        {\r\n          'no-navbar': !this.shouldShowNavbar,\r\n          'sidebar-open': this.isSidebarOpen,\r\n          'no-sidebar': !this.shouldShowSidebar\r\n        },\r\n        userPageClass\r\n      ]\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    window.addEventListener('scroll', this.onScroll)\r\n\r\n    // configure progress bar\r\n    nprogress.configure({ showSpinner: false })\r\n\r\n    this.$router.beforeEach((to, from, next) => {\r\n      if (to.path !== from.path && !Vue.component(to.name)) {\r\n        nprogress.start()\r\n      }\r\n      next()\r\n    })\r\n\r\n    this.$router.afterEach(() => {\r\n      nprogress.done()\r\n      this.isSidebarOpen = false\r\n    })\r\n\r\n    this.$on('sw-updated', this.onSWUpdated)\r\n  },\r\n\r\n  methods: {\r\n    toggleSidebar (to) {\r\n      this.isSidebarOpen = typeof to === 'boolean' ? to : !this.isSidebarOpen\r\n    },\r\n\r\n    // side swipe\r\n    onTouchStart (e) {\r\n      this.touchStart = {\r\n        x: e.changedTouches[0].clientX,\r\n        y: e.changedTouches[0].clientY\r\n      }\r\n    },\r\n\r\n    onTouchEnd (e) {\r\n      const dx = e.changedTouches[0].clientX - this.touchStart.x\r\n      const dy = e.changedTouches[0].clientY - this.touchStart.y\r\n      if (Math.abs(dx) > Math.abs(dy) && Math.abs(dx) > 40) {\r\n        if (dx > 0 && this.touchStart.x <= 80) {\r\n          this.toggleSidebar(true)\r\n        } else {\r\n          this.toggleSidebar(false)\r\n        }\r\n      }\r\n    },\r\n\r\n    onSWUpdated (e) {\r\n      this.swUpdateEvent = e\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style src=\"prismjs/themes/prism-tomorrow.css\"></style>\r\n<style src=\"./styles/theme.styl\" lang=\"stylus\"></style>\r\n"]}]}