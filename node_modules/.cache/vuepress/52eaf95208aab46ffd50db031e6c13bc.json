{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\guide\\assets.md?vue&type=template&id=ff25a2a4&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\guide\\assets.md","mtime":1557200317041},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"静态资源处理\"><a class=\"header-anchor\" href=\"#静态资源处理\" aria-hidden=\"true\">#</a> 静态资源处理</h1>\n<h2 id=\"相对-urls\"><a class=\"header-anchor\" href=\"#相对-urls\" aria-hidden=\"true\">#</a> 相对 URLs</h2>\n<p>所有 markdown 文件都会被编译到 Vue 组件中并由 webpack 处理，因此你<strong>应该更倾向于</strong>使用相对 URL 引用任意资源：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token url\">![An image](./image.png)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这将和 <code>* .vue</code> 文件模板中的运作的方式相同。该图片资源将通过 <code>url-loader</code> 和 <code>file-loader</code> 进行处理，并被复制到生成的静态构建文件中的合适位置。</p>\n<p>另外，你可以使用 <code>~</code> 前缀来明确指出这是一个 webpack 模块请求，这将允许你使用 webpack 别名或 npm 依赖关系引用文件：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>![Image from alias](<span class=\"token strike\"><span class=\"token punctuation\">~</span>@alias/image.png)\n![Image from dependency](<span class=\"token punctuation\">~</span></span>some-dependency/image.png)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>webpack 别名可以通过 <code>.vuepress/config.js</code> 中的 <router-link to=\"/config/#configurewebpack\">configureWebpack</router-link> 进行配置。例如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  configureWebpack<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'@alias'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'path/to/some/dir'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"公共文件\"><a class=\"header-anchor\" href=\"#公共文件\" aria-hidden=\"true\">#</a> 公共文件</h2>\n<p>有时，你可能需要提供静态资源，这些资源并没有在任何 markdown 或主题组件中直接引用 - 例如，favicons 和 PWA 图标。在这种情况下，你可以将它们放在 <code>.vuepress/public</code> 中，并且它们将被复制到生成目录的根目录。</p>\n<h2 id=\"基准-url\"><a class=\"header-anchor\" href=\"#基准-url\" aria-hidden=\"true\">#</a> 基准 URL</h2>\n<p>如果你的网站部署到非根 URL，则需要在 <code>.vuepress/config.js</code> 中设置 <code>base</code> 选项。例如，如果你打算将你的网站部署到 <code>https://foo.github.io/bar/</code>，那么<code>base</code>应该设置为 <code>&quot;/bar/&quot;</code>（它应该始终以斜杠开始和结束）。</p>\n<p>使用基准 URL，如果你想在 <code>.vuepress/public</code> 中引用图片，则必须使用像 <code>/bar/image.png</code> 这样的 URL。但是，如果你有朝一日会决定更改 <code>base</code> ，这样的路径就显得很脆弱了。为了解决这个问题，VuePress 提供了一个内置的帮助器 <code>$withBase</code>（注入到 Vue 的原型中），它可以生成正确的路径：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>$withBase('/foo.png')<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>请注意，你不仅可以在主题组件中使用上述语法，还可以在 markdown 文件中使用上述语法。</p>\n<p>另外，如果设置了 <code>base</code>，它会自动作为前缀拼接到 <code>.vuepress/config.js</code> 选项中的所有静态资源 URL 中。</p>\n</div>\n",null]}