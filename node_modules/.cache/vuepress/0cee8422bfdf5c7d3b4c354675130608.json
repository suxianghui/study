{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\guide\\README.md?vue&type=template&id=f74dc9b8&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\guide\\README.md","mtime":1557200317059},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"介绍\"><a class=\"header-anchor\" href=\"#介绍\" aria-hidden=\"true\">#</a> 介绍</h1>\n<p>VuePress 由两部分组成：一部分是支持用 Vue 开发主题的极简静态网站生成器，另一个部分是为书写技术文档而优化的默认主题。它的诞生初衷是为了支持 Vue 及其子项目的文档需求。</p>\n<p>每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p>\n<h2 id=\"它是如何工作的？\"><a class=\"header-anchor\" href=\"#它是如何工作的？\" aria-hidden=\"true\">#</a> 它是如何工作的？</h2>\n<p>事实上，一个 VuePress 网站是一个由 <a href=\"http://vuejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue<OutboundLink/></a>、<a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Router<OutboundLink/></a> 和 <a href=\"http://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack<OutboundLink/></a> 驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 Vue DevTools 去调试你的自定义主题。</p>\n<p>在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的HTML。这种做法的灵感来源于 <a href=\"https://nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Nuxt<OutboundLink/></a> 的 <code>nuxt generate</code> 命令，以及其他的一些项目，比如 <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Gatsby<OutboundLink/></a>。</p>\n<h2 id=\"特性\"><a class=\"header-anchor\" href=\"#特性\" aria-hidden=\"true\">#</a> 特性</h2>\n<ul>\n<li>为技术文档而优化的 <router-link to=\"./markdown.html\">内置 Markdown 拓展</router-link></li>\n<li><router-link to=\"./using-vue.html\">在 Markdown 文件中使用 Vue 组件的能力</router-link></li>\n<li><router-link to=\"./custom-themes.html\">Vue 驱动的自定义主题系统</router-link></li>\n<li><router-link to=\"./../config/#serviceworker\">自动生成 Service Worker</router-link></li>\n<li><router-link to=\"./../config/#ga\">Google Analytics 集成</router-link></li>\n<li><router-link to=\"./../default-theme-config/#最后更新时间\">基于 Git 的 “最后更新时间”</router-link></li>\n<li><router-link to=\"./i18n.html\">多语言支持</router-link></li>\n<li>默认主题包含：\n<ul>\n<li>响应式布局</li>\n<li><router-link to=\"./../default-theme-config/#首页\">可选的主页</router-link></li>\n<li><router-link to=\"./../default-theme-config/#内置搜索\">简洁的开箱即用的标题搜索</router-link></li>\n<li><router-link to=\"./../default-theme-config/#algolia-搜索\">Algolia 搜索</router-link></li>\n<li>可自定义的<router-link to=\"./../default-theme-config/#导航栏\">导航栏</router-link> 和<router-link to=\"./../default-theme-config/#侧边栏\">侧边栏</router-link></li>\n<li><router-link to=\"./../default-theme-config/#git-仓库和编辑链接\">自动生成的 GitHub 链接和页面的编辑链接</router-link></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"todo\"><a class=\"header-anchor\" href=\"#todo\" aria-hidden=\"true\">#</a> Todo</h2>\n<p>VuePress 仍然处于开发中，这里有一些目前还不支持、但已经在计划中的特性：</p>\n<ul>\n<li>插件</li>\n<li>博客系统</li>\n</ul>\n<p>我们欢迎你为 VuePress 的开发作出贡献。</p>\n<h2 id=\"为什么不是\"><a class=\"header-anchor\" href=\"#为什么不是\" aria-hidden=\"true\">#</a> 为什么不是...?</h2>\n<h3 id=\"nuxt\"><a class=\"header-anchor\" href=\"#nuxt\" aria-hidden=\"true\">#</a> Nuxt</h3>\n<p>VuePress 能做的事情，Nuxt 理论上确实能够胜任，但 Nuxt 是为构建应用程序而生的，而 VuePress 则专注在以内容为中心的静态网站上，同时提供了一些为技术文档定制的开箱即用的特性。</p>\n<h3 id=\"studyify-docute\"><a class=\"header-anchor\" href=\"#studyify-docute\" aria-hidden=\"true\">#</a> studyify / Docute</h3>\n<p>这两个项目同样都是基于 Vue，然而它们都是完全的运行时驱动，因此对 SEO 不够友好。如果你并不关注 SEO，同时也不想安装大量依赖，它们仍然是非常好的选择！</p>\n<h3 id=\"hexo\"><a class=\"header-anchor\" href=\"#hexo\" aria-hidden=\"true\">#</a> Hexo</h3>\n<p>Hexo 一直驱动着 Vue 的文档 —— 事实上，在把我们的主站从 Hexo 迁移到 VuePress 之前，我们可能还有很长的路要走。Hexo 最大的问题在于他的主题系统太过于静态以及过度地依赖纯字符串，而我们十分希望能够好好地利用 Vue 来处理我们的布局和交互，同时，Hexo 的 Markdown 渲染的配置也不是最灵活的。</p>\n<h3 id=\"gitbook\"><a class=\"header-anchor\" href=\"#gitbook\" aria-hidden=\"true\">#</a> GitBook</h3>\n<p>我们的子项目文档一直都在使用 GitBook。GitBook 最大的问题在于当文件很多时，每次编辑后的重新加载时间长得令人无法忍受。它的默认主题导航结构也比较有限制性，并且，主题系统也不是 Vue 驱动的。GitBook 背后的团队如今也更专注于将其打造为一个商业产品而不是开源工具。</p>\n</div>\n",null]}