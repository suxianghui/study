{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\interview\\js.md?vue&type=template&id=11fca224&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\interview\\js.md","mtime":1557200317071},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"常规面试题\"><a class=\"header-anchor\" href=\"#常规面试题\" aria-hidden=\"true\">#</a> 常规面试题</h1>\n<p>事件委托应该是前端最经常问的一个问题。\n但其实里面有非常非常多的知识点可以考察。</p>\n<ul>\n<li>css last-of-type last-child</li>\n<li>事件委托的好处</li>\n<li>addEventListener 第三个参数</li>\n<li>实现 index</li>\n<li>类数组 =&gt; 数组</li>\n<li>querySelectorAll 方法相比 getElementsBy 系列方法有什么区别</li>\n<li>HTMLCollection NodeList 区别</li>\n</ul>\n<p>https://www.zhihu.com/question/24702250</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> ul <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nul<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>ul<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//htmlCollection => array</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>一道有意思的面试题\n<a href=\"https://juejin.im/post/5bdeb357e51d4536140fc7df\" target=\"_blank\" rel=\"noopener noreferrer\">100*100 的 canvas 占多少内存？<OutboundLink/></a></p>\n<h2 id=\"你有必要知道的几个-javascript-面试题\"><a class=\"header-anchor\" href=\"#你有必要知道的几个-javascript-面试题\" aria-hidden=\"true\">#</a> 你有必要知道的几个 JavaScript 面试题</h2>\n<h3 id=\"_1-使用-typeof-bar-object-判断-bar-是不是一个对象有神马潜在的弊端？如何避免这种弊端？\"><a class=\"header-anchor\" href=\"#_1-使用-typeof-bar-object-判断-bar-是不是一个对象有神马潜在的弊端？如何避免这种弊端？\" aria-hidden=\"true\">#</a> 1. 使用 typeof bar === &quot;object&quot; 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？</h3>\n<p>大部分情况下 typeof 是可信的，但 js 就是这样不靠谱，总是有一些边缘 case。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">//'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">//'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">//'number'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/pop/g</span>\n<span class=\"token keyword\">typeof</span> reg <span class=\"token comment\">//'object'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这时候你可以说使用 <code>instanceof</code>。但 instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型。\n简而言之就是</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token string\">''</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">//false</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">//true</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token comment\">//true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>只有使用构造函数创建的基本类型可以正确显示。</p>\n<p>所以到底有没有靠谱的校验类型方法？答案是有的 <a href=\"https://github.com/lifesinger/blog/issues/175\" target=\"_blank\" rel=\"noopener noreferrer\">详情见玉伯的分享<OutboundLink/></a></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Object]'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object String]'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Array]'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Function]'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>附加问题：</p>\n<ul>\n<li>我们知道 typeof new String(&quot;xxx&quot;) 返回 &quot;object&quot;，请问 typeof String(&quot;xxx&quot;) 返回什么？为什么？\n返回&quot;string&quot;，因为直接调用 String 返回的是一个字符串，而 new String 返回的是一个 String 对象。</li>\n</ul>\n<h3 id=\"_2-下面的代码会在-console-输出神马？为什么？\"><a class=\"header-anchor\" href=\"#_2-下面的代码会在-console-输出神马？为什么？\" aria-hidden=\"true\">#</a> 2. 下面的代码会在 console 输出神马？为什么？</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">//3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这题是以前比较常见的变量提升的问题\n它实际执行步骤是这样子的</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> b\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>并且 b 变成一个全局变量，而 a 还是一个局部变量，所以你在外部 console 是会报错的。</p>\n<h3 id=\"_3-下面的代码会在-console-输出神马？为什么？\"><a class=\"header-anchor\" href=\"#_3-下面的代码会在-console-输出神马？为什么？\" aria-hidden=\"true\">#</a> 3. 下面的代码会在 console 输出神马？为什么？</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">func</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outer func:  this.foo = '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outer func:  self.foo = '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner func:  this.foo = '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner func:  self.foo = '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这题是最简单的作用域问题，没啥好讨论的了。</p>\n<h3 id=\"_4-将-javascript-代码包含在一个函数块中有神马意思呢？为什么要这么做？\"><a class=\"header-anchor\" href=\"#_4-将-javascript-代码包含在一个函数块中有神马意思呢？为什么要这么做？\" aria-hidden=\"true\">#</a> 4. 将 JavaScript 代码包含在一个函数块中有神马意思呢？为什么要这么做？</h3>\n<p>换句话说，为什么要用立即执行函数表达式（Immediately-Invoked Function Expression）。</p>\n<p>IIFE 有两个比较经典的使用场景，一是类似于在循环中定时输出数据项，二是类似于 JQuery/Node 的插件和模块开发。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面的输出并不是你以为的 0，1，2，3，4，但输出的全部是 5，这时 IIFE 就能有用了：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>ES6 的话，可以用 let</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>而在 JQuery/Node 的插件和模块开发中，为避免变量污染，也是一个大大的 IIFE：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_5-在严格模式-use-strict-下进行-javascript-开发有神马好处？\"><a class=\"header-anchor\" href=\"#_5-在严格模式-use-strict-下进行-javascript-开发有神马好处？\" aria-hidden=\"true\">#</a> 5. 在严格模式('use strict')下进行 JavaScript 开发有神马好处？</h3>\n<ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<h3 id=\"_6-下面两个函数的返回值是一样的吗？为什么？\"><a class=\"header-anchor\" href=\"#_6-下面两个函数的返回值是一样的吗？为什么？\" aria-hidden=\"true\">#</a> 6. 下面两个函数的返回值是一样的吗？为什么？</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">{</span>\n    bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>对于 return 、break、continue 等语句，如果后面紧跟换行，解析器一定会自动在后面填充分号(😉，所以上面的第二个函数就直接被 <code>return</code>了。</p>\n<p>所以第二个函数是返回 <code>undefined</code>。</p>\n<h3 id=\"_7-神马是-nan，它的类型是神马？怎么测试一个值是否等于-nan\"><a class=\"header-anchor\" href=\"#_7-神马是-nan，它的类型是神马？怎么测试一个值是否等于-nan\" aria-hidden=\"true\">#</a> 7. 神马是 NaN，它的类型是神马？怎么测试一个值是否等于 NaN?</h3>\n<p>NaN 是 Not a Number 的缩写，JavaScript 的一种特殊数值，其类型是 Number，可以通过 isNaN(param) 来判断一个值是否是 NaN：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'23'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false 因为执行的时候先回转化为数字 所以 '23'=> 23</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'32131sdasd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true 先回 Number(\"123ABC\") 结果是 NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[object Number]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>ES6 中，isNaN() 成为了 Number 的静态方法：Number.isNaN().</p>\n<p>它的 polyfill 实现起来也很简单--利用了 NaN 自身永不相等于自身这一特征</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">!==</span> n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_8-解释一下下面代码的输出\"><a class=\"header-anchor\" href=\"#_8-解释一下下面代码的输出\" aria-hidden=\"true\">#</a> 8. 解释一下下面代码的输出</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//0.30000000000000004</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>另一道非常经典的面试题，js 精度问题 <a href=\"https://github.com/camsong/blog/issues/9\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 浮点数陷阱及解法<OutboundLink/></a></p>\n<p>JavaScript 存储任何数字都是遵循 <code>IEEE-754</code> 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。</p>\n<p>所以为什 0.1+0.2=0.30000000000000004？\n计算步骤为：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 0.1 和 0.2 都转化成二进制后再进行运算</span>\n<span class=\"token number\">0.00011001100110011001100110011001100110011001100110011010</span> <span class=\"token operator\">+</span>\n<span class=\"token number\">0.0011001100110011001100110011001100110011001100110011010</span> <span class=\"token operator\">=</span>\n<span class=\"token number\">0.0100110011001100110011001100110011001100110011001100111</span>\n\n<span class=\"token comment\">// 转成十进制正好是 0.30000000000000004</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>解决方案 你可以使用一些成熟的库如：<a href=\"https://github.com/MikeMcl/big.js\" target=\"_blank\" rel=\"noopener noreferrer\">big.js<OutboundLink/></a>，<a href=\"https://github.com/MikeMcl/bignumber.js\" target=\"_blank\" rel=\"noopener noreferrer\">bignumber.js<OutboundLink/></a>。\n或者对精度要求不高的情况下 直接 <code>toFixed</code>就可以了。</p>\n<p>不过注意它得到的值可能是不准确的。</p>\n<p>如：1.005.toFixed(2) 返回的是 1.00 而不是 1.01。</p>\n<p>原因： 1.005 实际对应的数字是 1.00499999999999989，在四舍五入时全部被舍去！</p>\n<h3 id=\"_9-实现函数-isinteger-x-来判断-x-是否是整数\"><a class=\"header-anchor\" href=\"#_9-实现函数-isinteger-x-来判断-x-是否是整数\" aria-hidden=\"true\">#</a> 9. 实现函数 isInteger(x) 来判断 x 是否是整数</h3>\n<p>可以将 x 转换成 10 进制，判断和本身是不是相等即可：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_10-在下面的代码中，数字-1-4-会以什么顺序输出？为什么会这样输出？\"><a class=\"header-anchor\" href=\"#_10-在下面的代码中，数字-1-4-会以什么顺序输出？为什么会这样输出？\" aria-hidden=\"true\">#</a> 10. 在下面的代码中，数字 1-4 会以什么顺序输出？为什么会这样输出？</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>最简单的运行提了，如果这都不会的话，真应该好好补习补习基础了。</p>\n<h3 id=\"_11-判断一个字符串是不是回文字符串\"><a class=\"header-anchor\" href=\"#_11-判断一个字符串是不是回文字符串\" aria-hidden=\"true\">#</a> 11. 判断一个字符串是不是回文字符串</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\W/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    str <span class=\"token operator\">==</span>\n    str\n      <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_12-写一个按照下面方式调用都能正常工作的-sum-方法\"><a class=\"header-anchor\" href=\"#_12-写一个按照下面方式调用都能正常工作的-sum-方法\" aria-hidden=\"true\">#</a> 12. 写一个按照下面方式调用都能正常工作的 sum 方法</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 5</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"_13-据下面的代码片段回答后面的问题\"><a class=\"header-anchor\" href=\"#_13-据下面的代码片段回答后面的问题\" aria-hidden=\"true\">#</a> 13. 据下面的代码片段回答后面的问题</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n  btn<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Button '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>没啥难度，不说了</p>\n<h3 id=\"_15-下面的代码会输出什么？为什么？\"><a class=\"header-anchor\" href=\"#_15-下面的代码会输出什么？为什么？\" aria-hidden=\"true\">#</a> 15. 下面的代码会输出什么？为什么？</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token string\">'2'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这个主要考察的隐式转换，规则太多太复杂了，我也记不住，如果真有面试官问你这个的话，随缘吧。</p>\n<h3 id=\"_16-解释下列代码的输出\"><a class=\"header-anchor\" href=\"#_16-解释下列代码的输出\" aria-hidden=\"true\">#</a> 16. 解释下列代码的输出</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0 || 1 = '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 || 2 = '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0 &amp;&amp; 1 = '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1 &amp;&amp; 2 = '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>运算符优先级的问题，这题同上，遇到就随缘吧，我反正搞不清也记不住。</p>\n<h3 id=\"_17-解释下面代码的输出\"><a class=\"header-anchor\" href=\"#_17-解释下面代码的输出\" aria-hidden=\"true\">#</a> 17. 解释下面代码的输出</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>==</code>和<code>===</code>的区别，太基础略。</p>\n<h2 id=\"移动端问题\"><a class=\"header-anchor\" href=\"#移动端问题\" aria-hidden=\"true\">#</a> 移动端问题</h2>\n<h3 id=\"_1-你怎么提高一个长列表在手机端滑动的流畅度\"><a class=\"header-anchor\" href=\"#_1-你怎么提高一个长列表在手机端滑动的流畅度\" aria-hidden=\"true\">#</a> 1. 你怎么提高一个长列表在手机端滑动的流畅度</h3>\n<p>这里主要考察的是否知道 <code>passive</code>这个属性</p>\n<p>首先解释一下为什么会卡顿：</p>\n<blockquote>\n<p>当你触摸滑动页面时，页面应该跟随手指一起滚动。而此时你绑定了一个 touchstart 事件，你的事件大概执行 200 毫秒。这时浏览器就犯迷糊了：如果你在事件绑定函数中调用了 preventDefault，那么页面就不应该滚动，如果你没有调用 preventDefault，页面就需要滚动。但是你到底调用了还是没有调用，浏览器不知道。只能先执行你的函数，等 200 毫秒后，绑定事件执行完了，浏览器才知道，“哦，原来你没有阻止默认行为，好的，我马上滚”。此时，页面开始滚。</p>\n</blockquote>\n<p>题外话，这里也可以考察你对<code>addEventListener</code>api 的熟练度，很多人其实不知道<code>addEventListener</code>其实第三个参数除了可以传<code>true</code> or <code>false</code>，还可以传一个对象。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\n\tcapture<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示`listener`会在该类型的事件捕获阶段传播到该`EventTarget`时触发</span>\n\tonce<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示`listener`在添加之后最多只调用一次。如果是`true`，`listener`会在其被调用之后自动移除</span>\n\tpassive<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示`listener`永远不会调用`preventDefault()`。如果`listener`仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}