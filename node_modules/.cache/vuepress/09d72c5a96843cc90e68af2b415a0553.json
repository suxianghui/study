{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Es6.md?vue&type=template&id=1c30efb4&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Es6.md","mtime":1557200317087},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"es6\"><a class=\"header-anchor\" href=\"#es6\" aria-hidden=\"true\">#</a> ES6</h1>\n<h4 id=\"_1、声明变量\"><a class=\"header-anchor\" href=\"#_1、声明变量\" aria-hidden=\"true\">#</a> 1、声明变量</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// es5\n声明变量 var --- variable\n用大写的形式去声明常量:var PI = 3.14159255358;\n常量的值允许被修改\n\n// es6\n// 通过let 关键字代替 var 来声明变量，用发与var几乎一致\n当let/const遇到{}会形成这个变量的块级作用域\n声明变量 let --- 叫命令或关键字\n声明常量 const PI = 3.1415926;\n报错会阻断下面的代码执行\n报错:Assignment to constant variale \n常量的值不允许被修改\n// 变量、常量不得重复定义(相同作用域)\n报错:Identifier &#39;num&#39; has already been declared\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2、变量提升\"><a class=\"header-anchor\" href=\"#_2、变量提升\" aria-hidden=\"true\">#</a> 2、变量提升</h4>\n<ul>\n<li>es5</li>\n</ul>\n<blockquote></blockquote>\n<pre><code>var 存在变量提升，只要在声明之前调用，就会有变量提升，并且值为undefined\n</code></pre>\n<ul>\n<li>es6</li>\n</ul>\n<blockquote>\n<p>let 语句声明的参数没有变量提升</p>\n</blockquote>\n<blockquote>\n<p>暂时性死区的概念：在变量声明之前调用，都是该变量的暂时性死区</p>\n</blockquote>\n<h4 id=\"_3、解构赋值\"><a class=\"header-anchor\" href=\"#_3、解构赋值\" aria-hidden=\"true\">#</a> 3、解构赋值</h4>\n<ul>\n<li><strong>三种状态</strong></li>\n</ul>\n<ol>\n<li>模式不匹配</li>\n<li>解构不成功：声明了变量，没有赋值（undefined）</li>\n<li>不完全解构</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称作解构赋值 \n// 数组的解构赋值\n// es5\nvar a = 1;\nvar b = 2;\nvar c = 3;\n// es6 好处:代码简洁\n// 数组\nlet [a,b,c] = [1,2,3];\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n// 对象\nlet person = {\n    name: &#39;zs&#39;,\n    age: 18,\n    hoppy: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;打豆豆&#39;],\n    address: &#39;北京八维&#39;\n}\nlet { obj: objs, obj: obj1 } = {\n    obj: person\n}\n\nconsole.log(objs)\n// 字符串\n// 会将字符串转换成类似数组的一个对象\nlet [a,b,c] = &#39;mmd&#39;;\n// a = m\n// b = m\n// c = d\nlet {length:len} = &#39;mmd&#39;;\n// len = 3\n\n// 数组的解构赋值在函数中应用\nlet fun = function([name,age]){ // 接收的是形参\n    console.log(name);\n    console.log(age);\n}\nfun([&#39;zs&#39;,18]) // 传递的参数是实参\n\n// 对象的解构赋值在函数中应用\nlet fun = function({name,age}){ // 接收的是形参\n    console.log(name);\n    console.log(age);\n}\nfun({name:&#39;zs&#39;,age:18}) // 传递的参数是实参\n\n\n// 通过数组的解构赋值，返回一个值\nlet fun = (val) =&gt; {\n    return [val, val + &quot;you aer the best!&quot;];\n}\nconsole.log(fun())\n\n// 通过对象的解构赋值来取json数据\nconst data = {\n    name:&#39;zs&#39;,\n    age:18\n}\nlet {name,age} = data;\nconsole.log(name);\nconsole.log(age)\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"总结：\"><a class=\"header-anchor\" href=\"#总结：\" aria-hidden=\"true\">#</a> 总结：</h4>\n<ul>\n<li>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象</li>\n<li>由于undefined和null无法转为对象，所以对他们进行解构赋值，都会报错</li>\n</ul>\n<h4 id=\"_4、语法提案的批准流程\"><a class=\"header-anchor\" href=\"#_4、语法提案的批准流程\" aria-hidden=\"true\">#</a> 4、语法提案的批准流程</h4>\n<ul>\n<li>Stade 0 - Strawman (展示阶段)</li>\n<li>Stage 1 - proposal (征求意见阶段)</li>\n<li>Stage 2 - Draft (草案阶段)</li>\n<li>Stage 3 - Candidate (候选人阶段)</li>\n<li>Stage 4 - Finished (定案阶段)</li>\n</ul>\n<h4 id=\"_5、字符串扩展\"><a class=\"header-anchor\" href=\"#_5、字符串扩展\" aria-hidden=\"true\">#</a> 5、字符串扩展</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>1、String.includes(string) 用来判断字符串中是否包含指定参数（string）\n2、String.startsWith(string) 字符串是否以XX开始\n3、String.endsWith(string) 字符串是否以XX开始\nstring.includes(string,start) \nstring 代表查询参数\nstart 代表查询起始位置\nincludes() 具备隐式转换\n\nlet str = &#39;123木头人&#39;\nconsole.log(str.includes(&#39;123&#39;,3)) // 结果为false\n\n\n// str.repeat() &#39;&#39;\n// str.repeat(0) &#39;&#39;\n// str.repeat(1) mmd\n// str.repeat(2) mmdmmd\nlet str = &#39;mmd&#39;;\nlet newString = str.repeat();\nconsole.log(newString)\n\nlet str = &#39;mmd&#39;;\nconsole.log(str.padStart(5,&#39;*&#39;)) // **mmd\nconsole.log(str.padEnd(5,&#39;*&#39;)) // mmd**\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}