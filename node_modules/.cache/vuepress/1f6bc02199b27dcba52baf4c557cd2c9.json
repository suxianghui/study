{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\miniapp\\wepy组件通信.md?vue&type=template&id=b291c8a0&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\miniapp\\wepy组件通信.md","mtime":1557200317076},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"组件通信\"><a class=\"header-anchor\" href=\"#组件通信\" aria-hidden=\"true\">#</a> 组件通信</h1>\n<h5 id=\"emit\"><a class=\"header-anchor\" href=\"#emit\" aria-hidden=\"true\">#</a> $emit</h5>\n<blockquote>\n<p>子向父通信</p>\n</blockquote>\n<h5 id=\"broadcast\"><a class=\"header-anchor\" href=\"#broadcast\" aria-hidden=\"true\">#</a> $broadcast</h5>\n<blockquote>\n<p>父向子通信</p>\n</blockquote>\n<h5 id=\"父子通信：父组件传递数据给子组件\"><a class=\"header-anchor\" href=\"#父子通信：父组件传递数据给子组件\" aria-hidden=\"true\">#</a> 父子通信：父组件传递数据给子组件</h5>\n<p><strong>1、通过props传值</strong></p>\n<ol>\n<li>如果需要传递动态属性值需要添加.sync修饰符</li>\n<li>如果要在子组件中修改父组件数据需要在接受的时候添加 twoWay: true</li>\n<li>如果需要数据双向绑定需要（.sync 和  twoWay 同时）</li>\n</ol>\n<p><strong>2、实用$broadcast将数据广播到所有子组件中</strong></p>\n<h5 id=\"子父通信：子组件传递数据给父组件\"><a class=\"header-anchor\" href=\"#子父通信：子组件传递数据给父组件\" aria-hidden=\"true\">#</a> 子父通信：子组件传递数据给父组件</h5>\n<ol>\n<li>在父组件中events中定义事件，在子组件$emit触发  （推荐）</li>\n<li>在父组件methods中添加方法，在子组件中this.$invoke('../', '函数名称')</li>\n<li>在子组件中通过this.$parent获取到父组件实例，调用父组件回调函数给父组件发送数据</li>\n</ol>\n<h5 id=\"同级：a、b两个同级组件的数据发送\"><a class=\"header-anchor\" href=\"#同级：a、b两个同级组件的数据发送\" aria-hidden=\"true\">#</a> 同级：A、B两个同级组件的数据发送</h5>\n<ol>\n<li>在A组件中通过this.$invoke('../B', '函数名称')  调用B组件中的回调函数传递数据</li>\n<li>将数据发送到父组件，父组件在传递给另一个子组件（代理方式）</li>\n<li>自己封装一个发布订阅器（eventbus）</li>\n</ol>\n<h5 id=\"跨级：\"><a class=\"header-anchor\" href=\"#跨级：\" aria-hidden=\"true\">#</a> 跨级：</h5>\n<ol>\n<li>逐层传递</li>\n<li>this.$invoke('组件路径', '函数名称')</li>\n</ol>\n<p><strong>使用redux可以做所有的数据管理</strong></p>\n</div>\n",null]}