{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Vue 各种方法之间的区别.md?vue&type=template&id=2a032b41&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\vue\\Vue 各种方法之间的区别.md","mtime":1557200317090},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"vue\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#vue\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" VUE\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"很多人面试会问啥 vue 实现原理，但我觉得这略过分，有多少人会老老实实看过它的源码。但我觉得面者这也只是知道 vue 双向绑定的原理吧。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [_c(\"li\", [_vm._v(\"发布者-订阅者模式（backbone.js）\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"一般通过 sub, pub 的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)，这种方式现在毕竟太 low 了，我们更希望通过 vm.property = value 这种方式更新数据，同时自动更新视图，于是有了下面两种方式\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\n            \"脏值检查（angular.js）\\nangular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"ul\", [\n          _c(\"li\", [\n            _vm._v(\"DOM 事件，譬如用户输入文本，点击按钮等( ng-click )\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"XHR 响应事件 ( $http )\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"浏览器 Location 变更事件 ( $location )\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"Timer 事件( $timeout , $interval )\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [_vm._v(\"执行 $digest() 或 $apply()\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [_c(\"li\", [_vm._v(\"数据劫持（vue.js）\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"vue.js[2.0] 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\\nvue.js[3.0]采取了 proxy 的方式\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h1\", { attrs: { id: \"各种方法之间的区别\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#各种方法之间的区别\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 各种方法之间的区别\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"一、methods和computed\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#一、methods和computed\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 一、methods和computed\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_vm._v(\"computed是计算属性，methods是方法。\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"computed计算属性是基于它们的依赖进行==缓存==的\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"computed只有在它的相关依赖发生改变时才会重新求值\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"而对于method ，只要发生重新渲染，method 调用==总会==执行该函数\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"==总之：数据量大，需要缓存的时候用computed；每次确实需要重新加载，不需要缓存时用methods==\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"二、computed和watch\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#二、computed和watch\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 二、computed和watch\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\"计算属性是==计算属性==，==侦听器watch==是侦听器watch\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"侦听器watch是侦听一个特定的值，当该值变化时执行特定的函数\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"三、-router和-route\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#三、-router和-route\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 三、$router和$route\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _vm._v(\n            \"router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"打印this.$route和this.$router，==两个同时存在==。\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"两者传参方式相同\")])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}