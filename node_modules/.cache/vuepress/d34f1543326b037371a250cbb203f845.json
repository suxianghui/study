{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\default-theme-config\\README.md?vue&type=template&id=41ceb7db&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\default-theme-config\\README.md","mtime":1557200317039},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"默认主题配置-default-theme-config\"><a class=\"header-anchor\" href=\"#默认主题配置-default-theme-config\" aria-hidden=\"true\">#</a> 默认主题配置(default theme config)</h1>\n<Bit/>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>此页面上列出的所有选项仅适用于默认主题。如果你使用的是自定义主题，则选项可能会有所不同。</p>\n</div>\n<h2 id=\"主页-homepage\"><a class=\"header-anchor\" href=\"#主页-homepage\" aria-hidden=\"true\">#</a> 主页(homepage)</h2>\n<p>默认主题提供了一个主页布局（用于<router-link to=\"/\">该网站的主页</router-link>）。要使用它，需要在你的根目录 <code>README.md</code> 的 <router-link to=\"./../guide/markdown.html#front-matter\">YAML front matter</router-link> 中指定 <code>home：true</code>，并加上一些其他的元数据。这是本网站使用的实际数据：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">heroImage</span><span class=\"token punctuation\">:</span> /hero.png\n<span class=\"token key atrule\">actionText</span><span class=\"token punctuation\">:</span> 起步 →\n<span class=\"token key atrule\">actionLink</span><span class=\"token punctuation\">:</span> /guide/\n<span class=\"token key atrule\">features</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 简明优先\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 对以 markdown 为中心的项目结构，做最简化的配置，帮助你专注于创作。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Vue 驱动\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 享用 Vue + webpack 开发环境，在 markdown 中使用 Vue 组件，并通过 Vue 开发自定义主题。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 性能高效\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> VuePress 将每个页面生成为预渲染的静态 HTML，每个页面加载之后，然后作为单页面应用程序(SPA)运行。\n<span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span> MIT Licensed <span class=\"token punctuation\">|</span> Copyright © 2018<span class=\"token punctuation\">-</span>present Evan You\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>YAML front matter</code> 的内容之后的其他任意内容，将被解析为正常 markdown，并在 features 部分之后渲染。</p>\n<p>如果你想彻底自定义主页的布局，你还可以使用<a href=\"#custom-layout-for-specific-pages\">自定义布局</a></p>\n<h2 id=\"导航栏-navbar\"><a class=\"header-anchor\" href=\"#导航栏-navbar\" aria-hidden=\"true\">#</a> 导航栏(navbar)</h2>\n<p>导航栏包括页面标题、<a href=\"#search-box\">搜索框</a>, <a href=\"#navbar-links\">导航栏链接</a>、<router-link to=\"./../guide/i18n.html\">多语言支持</router-link> 和 <a href=\"#git-repo-and-edit-links\">仓库链接</a>，它们都取决于你的配置。</p>\n<h3 id=\"导航栏链接-navbar-links\"><a class=\"header-anchor\" href=\"#导航栏链接-navbar-links\" aria-hidden=\"true\">#</a> 导航栏链接(navbar links)</h3>\n<p>你可以通过 <code>themeConfig.nav</code> 将链接添加到导航栏中：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>如果你提供一个 <code>items</code> 而不是 <code>link</code> 的数组，这些链接也可以是下拉菜单：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Languages'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/chinese'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Japanese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/japanese'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>另外，你可以通过嵌套的 items 在下拉菜单中设置子分组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Languages'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group1'</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/*  */</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group2'</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/*  */</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"禁用导航栏\"><a class=\"header-anchor\" href=\"#禁用导航栏\" aria-hidden=\"true\">#</a> 禁用导航栏</h3>\n<p>可以使用 <code>themeConfig.navbar</code>，来禁用某个特定页面的导航栏：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    navbar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以通过 <code>YAML front matter</code> 来禁用一个指定页面的导航栏：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">navbar</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"侧边栏-sidebar\"><a class=\"header-anchor\" href=\"#侧边栏-sidebar\" aria-hidden=\"true\">#</a> 侧边栏(sidebar)</h2>\n<p>要启用侧边栏, 请使用 <code>themeConfig.sidebar</code>。基本的配置需要一个链接数组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/page-a'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'/page-b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Explicit link text'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以省略 <code>.md</code> 扩展名，以 <code>/</code> 结尾的路径被推断为 <code>*/README.md</code> 。该链接的文本是自动推断的（从页面的第一个标题或 <code>YAML front matter</code> 中的显式标题）。如果你希望明确指定链接文本，请使用 <code>[link,text]</code> 形式的数组。</p>\n<h3 id=\"嵌套标题链接-nested-header-links\"><a class=\"header-anchor\" href=\"#嵌套标题链接-nested-header-links\" aria-hidden=\"true\">#</a> 嵌套标题链接(nested header links)</h3>\n<p>侧边栏自动显示当前激活页面中标题的链接，嵌套在页面本身的链接下。你可以使用 <code>themeConfig.sidebarDepth</code> 自定义此行为。默认深度是 <code>1</code>，它提取 <code>h2</code> 标题。将其设置为 <code>0</code> 将禁用标题链接，最大值为<code>2</code>，同时提取 <code>h2</code> 和 <code>h3</code> 标题。</p>\n<p>页面也可以在使用 <code>YAML front matter</code> 时覆盖此值：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">sidebarDepth: 2\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"显示所有页面的标题链接\"><a class=\"header-anchor\" href=\"#显示所有页面的标题链接\" aria-hidden=\"true\">#</a> 显示所有页面的标题链接 <Badge text=\"0.11.0+\"/></h3>\n<p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    displayAllHeaders<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 默认值：false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"激活的标题链接\"><a class=\"header-anchor\" href=\"#激活的标题链接\" aria-hidden=\"true\">#</a> 激活的标题链接</h3>\n<p>默认情况下，当用户滚动页面，查看不同部分时，嵌套的标题链接和 URL 中的哈希值会随之更新，此行为可以通过以下的主题配置来禁用：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    activeHeaderLinks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值：true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>值得一提的是，当你禁用此选项时，此功能相应的脚本将不会被加载，这是我们性能优化的一个小技巧。</p>\n</div>\n<h3 id=\"侧边栏分组-sidebar-groups\"><a class=\"header-anchor\" href=\"#侧边栏分组-sidebar-groups\" aria-hidden=\"true\">#</a> 侧边栏分组(sidebar groups)</h3>\n<p>你可以使用对象将侧边栏链接分成多个分组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group 1'</span><span class=\"token punctuation\">,</span>\n        collapsable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'/'</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group 2'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>侧边栏分组默认情况下是可折叠的。你可以强制一个分组始终以 <code>collapsable：false</code> 打开。</p>\n<h3 id=\"多个侧边栏-multiple-sidebars\"><a class=\"header-anchor\" href=\"#多个侧边栏-multiple-sidebars\" aria-hidden=\"true\">#</a> 多个侧边栏(multiple sidebars)</h3>\n<p>如果你希望为不同的内容部分显示不同的侧边栏，请先组织你的页面，放到每个要求部分的目录中:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n├─ README.md\n├─ contact.md\n├─ about.md\n├─ foo/\n│  ├─ README.md\n│  ├─ one.md\n│  └─ two.md\n└─ bar/\n   ├─ README.md\n   ├─ three.md\n   └─ four.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后，修改你的配置，将每个页面定义到不同的侧边栏中。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'/foo/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/* /foo/ */</span>\n        <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* /foo/one.html */</span>\n        <span class=\"token string\">'two'</span>   <span class=\"token comment\">/* /foo/two.html */</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'/bar/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">/* /bar/ */</span>\n        <span class=\"token string\">'three'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* /bar/three.html */</span>\n        <span class=\"token string\">'four'</span>   <span class=\"token comment\">/* /bar/four.html */</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// 回退(fallback)侧边栏配置</span>\n      <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">/* / */</span>\n        <span class=\"token string\">'contact'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* /contact.html */</span>\n        <span class=\"token string\">'about'</span>    <span class=\"token comment\">/* /about.html */</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">警告</p>\n<p>请确保将回退(fallback)侧边栏，定义在配置的最后。</p>\n<p>VuePress 会按从上到下的顺序，遍历侧边栏配置。如果回退侧边栏定义在第一位，VuePress 会无法正确的匹配 <code>/foo/</code> 或 <code>/bar/four.html</code>，因为他们都以 <code>/</code> 为开始。</p>\n</div>\n<h3 id=\"自动生成侧栏-auto-sidebar-for-single-pages\"><a class=\"header-anchor\" href=\"#自动生成侧栏-auto-sidebar-for-single-pages\" aria-hidden=\"true\">#</a> 自动生成侧栏(auto sidebar for single pages)</h3>\n<p>如果你希望自动生成仅包含当前页面的标题链接的侧边栏，可以在该页面上使用  <code>YAML front matter</code>：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你也可以通过配置来在所有页面中启用它：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在 <router-link to=\"./../guide/i18n.html\">多语言</router-link> 模式下, 你也可以将其应用到某一特定的语言下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       sidebar<span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"禁用侧边栏-disabling-the-sidebar\"><a class=\"header-anchor\" href=\"#禁用侧边栏-disabling-the-sidebar\" aria-hidden=\"true\">#</a> 禁用侧边栏(disabling the sidebar)</h3>\n<p>你可以使用 <code>YAML front matter</code> 禁用特定页面上的侧边栏：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"搜索框-search-box\"><a class=\"header-anchor\" href=\"#搜索框-search-box\" aria-hidden=\"true\">#</a> 搜索框(search box)</h2>\n<h3 id=\"内置搜索-built-in-search\"><a class=\"header-anchor\" href=\"#内置搜索-built-in-search\" aria-hidden=\"true\">#</a> 内置搜索(built-in search)</h3>\n<p>可以通过 <code>themeConfig.search: false</code> 禁用内置搜索框，以及通过 <code>themeConfig.searchMaxSuggestions</code> 来调整搜索框显示的搜索提示数量：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    search<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    searchMaxSuggestions<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>如果你需要全文搜索，内置搜索只能从标题 <code>h2</code> 和 <code>h3</code> 标题构建索引，你可以使用 <a href=\"#algolia-search\">Algolia 搜索</a>。</p>\n</div>\n<h3 id=\"algolia-search\"><a class=\"header-anchor\" href=\"#algolia-search\" aria-hidden=\"true\">#</a> Algolia Search</h3>\n<p>可以通过 <code>themeConfig.algolia</code> 选项，来用 <a href=\"https://community.algolia.com/docsearch/\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia DocSearch<OutboundLink/></a> 替换内置搜索。要启用 Algolia 搜索，至少需要提供 <code>apiKey</code> 和 <code>indexName</code>：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    algolia<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      apiKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;API_KEY>'</span><span class=\"token punctuation\">,</span>\n      indexName<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;INDEX_NAME>'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>不同于开箱即用的 <a href=\"#%E5%86%85%E7%BD%AE%E6%90%9C%E7%B4%A2\">内置搜索</a>，<a href=\"https://community.algolia.com/docsearch/\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia 搜索<OutboundLink/></a> 需要你在使用之前将你的网站提交给它们用于创建索引。</p>\n</div>\n<p>更多信息，请参考 <a href=\"https://github.com/algolia/docsearch#docsearch-options\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia DocSearch 文档<OutboundLink/></a>。</p>\n<h2 id=\"最近更新\"><a class=\"header-anchor\" href=\"#最近更新\" aria-hidden=\"true\">#</a> 最近更新</h2>\n<p><code>themeConfig.lastUpdated</code> 选项允许你获取每个文件的最后一次 git 提交的 UNIX 时间戳（ms），并且它也会以合适的格式显示在每个页面的底部：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    lastUpdated<span class=\"token punctuation\">:</span> <span class=\"token string\">'Last Updated'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// string | boolean</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>请注意，它默认是关闭的，如果给定一个 <code>string</code> 类型的值，它将会作为前缀显示（默认值是：<code>Last Updated</code>）。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">WARNING</p>\n<p>由于 <code>lastUpdated</code> 是基于 <code>git</code> 的, 所以你只能在一个基于 <code>git</code> 的项目中启用它。</p>\n</div>\n<h2 id=\"service-worker\"><a class=\"header-anchor\" href=\"#service-worker\" aria-hidden=\"true\">#</a> Service Worker</h2>\n<p><code>themeConfig.serviceWorker</code> 选项将允许你进行 service worker 相关的配置</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>请不要将 <code>themeConfig.serviceWorker</code> 与 <router-link to=\"./../config/#serviceworker\">Config &gt; serviceWorker</router-link> 混淆，<router-link to=\"./../config/#serviceworker\">Config &gt; serviceWorker</router-link> 是<strong>站点级别的</strong>，而 <code>themeConfig.serviceWorker</code> 是<strong>主题级别的</strong></p>\n</div>\n<h3 id=\"刷新内容的弹窗\"><a class=\"header-anchor\" href=\"#刷新内容的弹窗\" aria-hidden=\"true\">#</a> 刷新内容的弹窗 <Badge text=\"0.13.0+\"/> <Badge text=\"beta\" type=\"warn\"/></h3>\n<p>开启 <code>themeConfig.serviceWorker.updatePopup</code> 选项，将开启一个能够刷新内容的弹窗。当网站更新（即 Worker 更新）时，它会提供一个 <code>refresh</code> 按钮，允许用户立刻刷新内容。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>如果没有 <code>refresh</code> 按钮，新的 service worker 将在所有的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clients\" target=\"_blank\" rel=\"noopener noreferrer\">clients<OutboundLink/></a> 关闭后才会处于活动状态。这意味着访问者在关闭你网站的所有标签之前将无法看到新内容。但是，<code>refresh</code> 按钮可以立即激活新的 Service Worker。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// Boolean | Object, 默认值是 undefined.</span>\n      <span class=\"token comment\">// 如果设置为 true, 默认的文本配置将是: </span>\n      <span class=\"token comment\">// updatePopup: { </span>\n      <span class=\"token comment\">//    message: \"New content is available.\", </span>\n      <span class=\"token comment\">//    buttonText: \"Refresh\" </span>\n      <span class=\"token comment\">// }</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"上一页-下一页链接-prev-next-links\"><a class=\"header-anchor\" href=\"#上一页-下一页链接-prev-next-links\" aria-hidden=\"true\">#</a> 上一页 / 下一页链接(prev / next links)</h2>\n<p>根据激活页面的侧边栏顺序自动推断上一个和下一个链接。你也可以使用 <code>YAML front matter</code> 来显式覆盖或禁用它们：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">prev</span><span class=\"token punctuation\">:</span> ./some<span class=\"token punctuation\">-</span>other<span class=\"token punctuation\">-</span>page\n<span class=\"token key atrule\">next</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"git-仓库和编辑链接\"><a class=\"header-anchor\" href=\"#git-仓库和编辑链接\" aria-hidden=\"true\">#</a> Git 仓库和编辑链接</h2>\n<p>提供 <code>themeConfig.repo</code> 会在导航栏中自动生成一个 GitHub 链接，并在每个页面的底部显示「编辑此页面」链接。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 假定 GitHub。也可以是一个完整的 GitLab URL。</span>\n    repo<span class=\"token punctuation\">:</span> <span class=\"token string\">'vuejs/vuepress'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 自定义项目仓库链接文字</span>\n    <span class=\"token comment\">// 默认根据 `themeConfig.repo` 中的 URL 来自动匹配是 \"GitHub\"/\"GitLab\"/\"Bitbucket\" 中的哪个，如果不设置时是 \"Source\"。</span>\n    repoLabel<span class=\"token punctuation\">:</span> <span class=\"token string\">'贡献代码！'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// 以下为可选的 \"Edit this page\" 链接选项</span>\n\n    <span class=\"token comment\">// 如果你的文档和项目位于不同仓库：</span>\n    docsRepo<span class=\"token punctuation\">:</span> <span class=\"token string\">'vuejs/vuepress'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 如果你的文档不在仓库的根目录下：</span>\n    docsDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'docs'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 如果你的文档在某个特定的分支（默认是 'master' 分支）：</span>\n    docsBranch<span class=\"token punctuation\">:</span> <span class=\"token string\">'master'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 默认为 false，设置为 true 来启用</span>\n    editLinks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 自定义编辑链接的文本。默认是 \"Edit this page\"</span>\n    editLinkText<span class=\"token punctuation\">:</span> <span class=\"token string\">'帮助我们改进页面内容！'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你还可以通过 <code>YAML front matter</code> 隐藏指定页面上的编辑链接：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">editLink</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"简单的-css-覆盖\"><a class=\"header-anchor\" href=\"#简单的-css-覆盖\" aria-hidden=\"true\">#</a> 简单的 CSS 覆盖</h2>\n<p>如果你希望对默认主题的样式应用简单的覆盖，可以创建一个 <code>.vuepress/override.styl</code> 文件。 这是 <a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Stylus<OutboundLink/></a> 文件，但你也可以使用普通的 CSS 语法。</p>\n<p>有几个颜色变量可以调整：</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// 显示默认值</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$accentColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#3eaf7c</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#2c3e50</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$borderColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#eaecef</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$codeBgColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#282c34</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"仍然存在的问题\"><a class=\"header-anchor\" href=\"#仍然存在的问题\" aria-hidden=\"true\">#</a> 仍然存在的问题 <Badge text=\"< 0.12.0\" type='error'/></h3>\n<p>为了覆盖上面提到的默认变量，<code>override.styl</code> 将在默认主题的 <code>config.styl</code> 末尾导入，这个文件将被多个文件使用，所以一旦你在这里写了样式，你的 样式将被多次复制。参考 <a href=\"https://github.com/vuejs/vuepress/issues/637\" target=\"_blank\" rel=\"noopener noreferrer\">#637<OutboundLink/></a>。</p>\n<h3 id=\"迁移你的样式到-style-styl\"><a class=\"header-anchor\" href=\"#迁移你的样式到-style-styl\" aria-hidden=\"true\">#</a> 迁移你的样式到 <code>style.styl</code> <Badge text=\"0.12.0+\"/></h3>\n<p>事实上，<code>style constants override</code> 和 <code>styles override</code> 是两个东西，前者应该在编译 CSS 之前执行，而后者应该在 CSS bundle 末尾生成，它具有最高优先级。</p>\n<p>从 <code>0.12.0</code> 开始，我们将 <code>override.styl</code> 分成两个 API：<code>override.styl</code> 和 <code>style.styl</code> 。如果你以前在 <code>override.styl</code> 中编写样式，例如：</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/override.styl</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> red </span><span class=\"token comment\">// stylus constants override.</span>\n\n<span class=\"token selector\">#my-style <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// your extra styles.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你需要抽离这部分样式到 <code>style.styl</code>:</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/override.styl, SHOULD ONLY contain \"stylus constants override\".</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> red</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/style.styl, your extra styles.</span>\n<span class=\"token selector\">#my-style <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"自定义页面的-class\"><a class=\"header-anchor\" href=\"#自定义页面的-class\" aria-hidden=\"true\">#</a> 自定义页面的 class</h2>\n<p>有时，你可能需要为特定的页面添加一个唯一的 class，以便你只能在自定义 CSS 中定位该页面上的内容。 你可以在 <code>YAML front matter</code> 中用 <code>pageClass</code> 在主题的容器 div 中添加一个 class：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">pageClass</span><span class=\"token punctuation\">:</span> custom<span class=\"token punctuation\">-</span>page<span class=\"token punctuation\">-</span>class\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后你就可以只编写针对该页面的 CSS：</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token comment\">/* .vuepress/override.styl */</span>\n\n<span class=\"token selector\">.theme-container.custom-page-class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 页面特定的规则 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"特定页面的自定义布局-custom-layout-for-specific-pages\"><a class=\"header-anchor\" href=\"#特定页面的自定义布局-custom-layout-for-specific-pages\" aria-hidden=\"true\">#</a> 特定页面的自定义布局(custom layout for specific pages)</h2>\n<p>默认情况下，每个 <code>*.md</code> 文件的内容都会显示在一个 <code>&lt;div class =“page”&gt;</code> 容器中，以及侧边栏，自动生成的编辑链接和 prev/next 链接。如果你希望使用完全自定义的组件代替页面（同时只保留导航栏），则可以使用 <code>YAML front matter</code> 再次指定要使用的组件：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> SpecialLayout\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这将为给定页面渲染 <code>.vuepress/components/SpecialLayout.vue</code>。</p>\n<h2 id=\"弹出-ejecting\"><a class=\"header-anchor\" href=\"#弹出-ejecting\" aria-hidden=\"true\">#</a> 弹出(ejecting)</h2>\n<p>你可以将默认主题的源代码复制到 <code>.vuepress/theme</code> 中，来使用 <code>vuepress eject [targetDir]</code> 命令彻底自定义主题。但是请注意，一旦你 eject，即使你升级 VuePress 版本，你这仍然是自己的主题，并且不会收到对默认主题的未来更新或错误修复。</p>\n</div>\n",null]}