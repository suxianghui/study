{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\guide\\using-vue.md?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\guide\\using-vue.md","mtime":1557200317066},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\css-loader\\index.js","mtime":1557274553694},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.example {\n  color: #41b883;\n}\n",{"version":3,"sources":["using-vue.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA","file":"using-vue.md","sourceRoot":"src/zh/guide","sourcesContent":["<template>\n<div class=\"content\"><h1 id=\"在-markdown-中-使用-vue\"><a class=\"header-anchor\" href=\"#在-markdown-中-使用-vue\" aria-hidden=\"true\">#</a> 在 Markdown 中 使用 Vue</h1>\n<h2 id=\"浏览器的-api-访问限制\"><a class=\"header-anchor\" href=\"#浏览器的-api-访问限制\" aria-hidden=\"true\">#</a> 浏览器的 API 访问限制</h2>\n<p>当你在开发一个 VuePress 应用时，由于所有的页面在生成静态 HTML 时都需要通过 Node.js 服务端渲染，因此所有的 Vue 相关代码都应当遵循 <a href=\"https://ssr.vuejs.org/zh/universal.html\" target=\"_blank\" rel=\"noopener noreferrer\">编写通用代码<OutboundLink/></a> 的要求。简而言之，请确保只在 <code>beforeMount</code> 或者 <code>mounted</code> 访问浏览器 / DOM 的 API。</p>\n<p>如果你正在使用，或者需要展示一个对于 SSR 不怎么友好的组件（比如包含了自定义指令），你可以将它们包裹在内置的 <code>&lt;ClientOnly&gt;</code> 组件中：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NonSSRFriendlyComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>请注意，这并不能解决一些组件或库在<strong>导入</strong>时就试图访问浏览器 API 的问题 —— 如果需要使用这样的组件或库，你需要在合适的生命周期钩子中<strong>动态导入</strong>它们：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib-that-access-window-on-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// use code</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"模板语法\"><a class=\"header-anchor\" href=\"#模板语法\" aria-hidden=\"true\">#</a> 模板语法</h2>\n<h3 id=\"插值\"><a class=\"header-anchor\" href=\"#插值\" aria-hidden=\"true\">#</a> 插值</h3>\n<p>每一个 Markdown 文件将首先被编译成 HTML，接着作为一个 Vue 组件传入 <code>vue-loader</code>，这意味着你可以在文本中使用 Vue 风格的插值：</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ 1 + 1 }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div class=\"language-text\"><pre><code>{{ 1 + 1 }}</code></pre></div>\n<h3 id=\"指令\"><a class=\"header-anchor\" href=\"#指令\" aria-hidden=\"true\">#</a> 指令</h3>\n<p>同样地，也可以使用指令:</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>i in 3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ i }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div class=\"language-text\"><pre><code><span v-for=\"i in 3\">{{ i }} </span></code></pre></div>\n<h3 id=\"访问网站以及页面的数据\"><a class=\"header-anchor\" href=\"#访问网站以及页面的数据\" aria-hidden=\"true\">#</a> 访问网站以及页面的数据</h3>\n<p>编译后的组件没有私有数据，但可以访问 <router-link to=\"./custom-themes.html#网站和页面的元数据\">网站的元数据</router-link>，举例来说：</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ $page }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/using-vue.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using Vue in Markdown\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"escaping\"><a class=\"header-anchor\" href=\"#escaping\" aria-hidden=\"true\">#</a> Escaping</h2>\n<p>默认情况下，块级 (block) 的代码块将会被自动包裹在 <code>v-pre</code> 中。如果你想要在内联 (inline) 的代码块或者普通文本中显示原始的大括号，或者一些 Vue 特定的语法，你需要使用自定义容器 <code>v-pre</code> 来包裹：</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>::: v-pre\n<span class=\"token code keyword\">`{{ This will be displayed as-is }}`</span>\n:::\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div v-pre>\n<p><code>{{ This will be displayed as-is }}</code></p>\n</div>\n<h2 id=\"使用组件\"><a class=\"header-anchor\" href=\"#使用组件\" aria-hidden=\"true\">#</a> 使用组件</h2>\n<p>所有在 <code>.vuepress/components</code> 中找到的 <code>*.vue</code> 文件将会自动地被注册为全局的异步组件，如：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ components\n      ├─ demo-1.vue\n      ├─ OtherComponent.vue\n      └─ Foo\n         └─ Bar.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以直接使用这些组件在任意的 Markdown 文件中（组件名是通过文件名取到的）：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>demo-1</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Foo-Bar</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><demo-1></demo-1>\n<OtherComponent/>\n<Foo-Bar/>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">重要！</p>\n<p>请确保一个自定义组件的名字包含连接符或者是 PascalCase，否则，它将会被视为一个内联元素，并被包裹在一个 <code>&lt;p&gt;</code> 标签中，这将会导致 HTML 渲染紊乱，因为 HTML 标准规定， <code>&lt;p&gt;</code> 标签中不允许放置任何块级元素。</p>\n</div>\n<h3 id=\"在标题中使用组件\"><a class=\"header-anchor\" href=\"#在标题中使用组件\" aria-hidden=\"true\">#</a> 在标题中使用组件</h3>\n<p>你可以在标题中使用 Vue 组件，但是请留意以下两种方式的不同：</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>输出的 HTML</th>\n<th>解析后的标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre v-pre><code> # text &lt;Tag/&gt; </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td><pre v-pre><code> # text `&lt;Tag/&gt;` </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td>\n<td><code>text &lt;Tag/&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>被 <code>&lt;code&gt;</code> 包装的 HTML 将按原样显示，只有未被包装的 HTML 才会被 Vue 解析。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>输出的 HTML 由 <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it<OutboundLink/></a> 完成。而解析后的标题由 VuePress 完成，用于<router-link to=\"./../default-theme-config/#侧边栏\">侧边栏</router-link>以及文档的标题。</p>\n</div>\n<h2 id=\"使用预处理器\"><a class=\"header-anchor\" href=\"#使用预处理器\" aria-hidden=\"true\">#</a> 使用预处理器</h2>\n<p>VuePress 对以下预处理器已经内置相关的 webpack 配置：<code>sass</code>、<code>scss</code>、<code>less</code>、<code>stylus</code> 和 <code>pug</code>。要使用它们你只需要在项目中安装对应的依赖即可。例如，要使用 <code>sass</code>，需要安装：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D sass-loader node-sass\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后你就可以在 Markdown 或是组件中使用如下代码：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  .title\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>要在组件中使用 <code>&lt;template lang=&quot;pug&quot;&gt;</code>，则需要安装 <code>pug</code> 和 <code>pug-plain-loader</code>:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D pug pug-plain-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>需要指出的是，如果你是一个 <code>stylus</code> 用户，你并不需要在你的项目中安装 <code>stylus</code> 和 <code>stylus-loader</code>，因为 VuePress 已经内置了它们。</p>\n<p>对于那些没有内置的预处理器，除了安装对应的依赖，你还需要 <router-link to=\"./../config/#configurewebpack\">拓展内部的 Webpack 配置</router-link>。</p>\n</div>\n<h2 id=\"脚本和样式提升\"><a class=\"header-anchor\" href=\"#脚本和样式提升\" aria-hidden=\"true\">#</a> 脚本和样式提升</h2>\n<p>有时，你可以只想在当前页面应用一些 JavaScript 或者 CSS，在这种情况下，你可以直接在 Markdown 文件中使用原生的 <code>&lt;script&gt;</code> 或者 <code>&lt;style&gt;</code> 标签，它们将会从编译后的 HTML 文件中提取出来，并作为生成的 Vue 单文件组件的 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签。</p>\n<p class=\"demo\" :class=\"$style.example\"></p>\n<h2 id=\"内置的组件\"><a class=\"header-anchor\" href=\"#内置的组件\" aria-hidden=\"true\">#</a> 内置的组件</h2>\n<h3 id=\"outboundlink\"><a class=\"header-anchor\" href=\"#outboundlink\" aria-hidden=\"true\">#</a> OutboundLink <Badge text=\"stable\"/></h3>\n<p>(<OutboundLink/>) 用来表明当前是一个外部链接。在 VuePress 中这个组件会紧跟在每一个外部链接后面。</p>\n<h3 id=\"clientonly\"><a class=\"header-anchor\" href=\"#clientonly\" aria-hidden=\"true\">#</a> ClientOnly <Badge text=\"stable\"/></h3>\n<p>参考 <a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84-api-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6\">浏览器的 API 访问限制</a>。</p>\n<h3 id=\"content\"><a class=\"header-anchor\" href=\"#content\" aria-hidden=\"true\">#</a> Content <Badge text=\"beta\" type=\"warn\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>custom</code> - boolean</li>\n</ul>\n</li>\n<li>\n<p><strong>用法</strong>：</p>\n</li>\n</ul>\n<p>当前的 <code>.md</code> 文件渲染的内容，当你在使用 <router-link to=\"./../default-theme-config/#特定页面的自定义布局\">自定义布局</router-link> 时，它将非常有用。</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>参考:</strong></p>\n<ul>\n<li><router-link to=\"./custom-themes.html#获取渲染内容\">自定义主题 &gt; 获取渲染内容</router-link></li>\n</ul>\n<h3 id=\"badge\"><a class=\"header-anchor\" href=\"#badge\" aria-hidden=\"true\">#</a> Badge <Badge text=\"beta\" type=\"warn\"/> <Badge text=\"0.10.1+\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>text</code> - string</li>\n<li><code>type</code> - string, 可选值： <code>&quot;tip&quot;|&quot;warn&quot;|&quot;error&quot;</code>，默认值是： <code>&quot;tip&quot;</code></li>\n<li><code>vertical</code> - string, 可选值： <code>&quot;top&quot;|&quot;middle&quot;</code>，默认值是： <code>&quot;top&quot;</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n</li>\n</ul>\n<p>你可以在标题中，使用这个组件来为某些 API 添加一些状态：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token title important\"><span class=\"token punctuation\">###</span> Badge &lt;Badge text=\"beta\" type=\"warn\"/> &lt;Badge text=\"0.10.1+\"/></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>参考:</strong></p>\n<ul>\n<li><a href=\"#%E5%9C%A8%E6%A0%87%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6\">在标题中使用组件</a></li>\n</ul>\n</div>\n</template>\n<style module>\n.example {\n  color: #41b883;\n}\n</style>\n\n<script>\nexport default {\n  mounted () {\n    document.querySelector(`.${this.$style.example}`)\n      .textContent = '这个块是被内联的脚本渲染的，样式也采用了内联样式。'\n  }\n}\n</script>\n"]}]}