{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\chain\\MVVM.md?vue&type=template&id=72903912&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\chain\\MVVM.md","mtime":1557200317052},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"mvvm\"><a class=\"header-anchor\" href=\"#mvvm\" aria-hidden=\"true\">#</a> MVVM</h1>\n<h4 id=\"_1、mvvm是什么？\"><a class=\"header-anchor\" href=\"#_1、mvvm是什么？\" aria-hidden=\"true\">#</a> 1、MVVM是什么？</h4>\n<ol>\n<li>MVVM是Model-View-ViewModel的简写</li>\n<li>它本质上是MVC 的改进版</li>\n<li>MVVM（Model-View-ViewModel）框架的由来是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架</li>\n</ol>\n<h4 id=\"_2、mvvm优点\"><a class=\"header-anchor\" href=\"#_2、mvvm优点\" aria-hidden=\"true\">#</a> 2、MVVM优点</h4>\n<ul>\n<li>\n<blockquote>\n<p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><strong>低耦合</strong>：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的&quot;View&quot;上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变</li>\n<li><strong>可重用性</strong>：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑</li>\n<li><strong>独立开发</strong>：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xml代码</li>\n<li><strong>可测试</strong>：界面素来是比较难于测试的，而现在测试可以针对ViewModel来写</li>\n</ol>\n</div>\n",null]}