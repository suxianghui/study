{"remainingRequest":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\1\\实训一\\study\\study\\src\\zh\\default-theme-config\\README.md?vue&type=template&id=3965cb3a&","dependencies":[{"path":"D:\\1\\实训一\\study\\study\\src\\zh\\default-theme-config\\README.md","mtime":1557200317058},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\1\\实训一\\study\\study\\lib\\webpack\\markdownLoader.js","mtime":1557200316988}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"默认主题\"><a class=\"header-anchor\" href=\"#默认主题\" aria-hidden=\"true\">#</a> 默认主题</h1>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>本页所列的选项仅对默认主题生效。如果你在使用一个自定义主题，选项可能会有不同。</p>\n</div>\n<h2 id=\"首页\"><a class=\"header-anchor\" href=\"#首页\" aria-hidden=\"true\">#</a> 首页</h2>\n<p>默认的主题提供了一个首页（Homepage）的布局 (用于 <router-link to=\"./../\">这个网站的主页</router-link>)。想要使用它，需要在你的根级 <code>README.md</code> 的 <router-link to=\"./../guide/markdown.html#front-matter\">YAML front matter</router-link> 指定 <code>home: true</code>。以下是这个网站实际使用的数据：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">heroImage</span><span class=\"token punctuation\">:</span> /hero.png\n<span class=\"token key atrule\">actionText</span><span class=\"token punctuation\">:</span> 快速上手 →\n<span class=\"token key atrule\">actionLink</span><span class=\"token punctuation\">:</span> /zh/guide/\n<span class=\"token key atrule\">features</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 简洁至上\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Vue驱动\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 高性能\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\n<span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span> MIT Licensed <span class=\"token punctuation\">|</span> Copyright © 2018<span class=\"token punctuation\">-</span>present Evan You\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>任何 <code>YAML front matter</code> 之后额外的内容将会以普通的 markdown 被渲染，并插入到 <code>features</code> 的后面。</p>\n<h2 id=\"导航栏\"><a class=\"header-anchor\" href=\"#导航栏\" aria-hidden=\"true\">#</a> 导航栏</h2>\n<p>导航栏可能包含你的页面标题、<a href=\"#%E6%90%9C%E7%B4%A2%E6%A1%86\">搜索框</a>、 <a href=\"#%E5%AF%BC%E8%88%AA%E6%A0%8F%E9%93%BE%E6%8E%A5\">导航栏链接</a>、<router-link to=\"./../guide/i18n.html\">多语言切换</router-link>、<a href=\"#git-%E4%BB%93%E5%BA%93%E5%92%8C%E7%BC%96%E8%BE%91%E9%93%BE%E6%8E%A5\">仓库链接</a>，它们均取决于你的配置。</p>\n<h3 id=\"导航栏链接\"><a class=\"header-anchor\" href=\"#导航栏链接\" aria-hidden=\"true\">#</a> 导航栏链接</h3>\n<p>你可以通过 <code>themeConfig.nav</code> 增加一些导航栏链接:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Guide'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/guide/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'External'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://google.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>当你提供了一个 <code>items</code> 数组而不是一个单一的 <code>link</code> 时，它将显示为一个 <code>下拉列表</code> ：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Languages'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/chinese'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Japanese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/japanese'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此外，你还可以通过嵌套的 <code>items</code> 来在 <code>下拉列表</code> 中设置分组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Languages'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group1'</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/*  */</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group2'</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token comment\">/*  */</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"禁用导航栏\"><a class=\"header-anchor\" href=\"#禁用导航栏\" aria-hidden=\"true\">#</a> 禁用导航栏</h3>\n<p>你可以使用 <code>themeConfig.navbar</code> 来禁用所有页面的导航栏：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    navbar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你也可以通过 <code>YAML front matter</code> 来禁用某个指定页面的导航栏：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">navbar</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"侧边栏\"><a class=\"header-anchor\" href=\"#侧边栏\" aria-hidden=\"true\">#</a> 侧边栏</h2>\n<p>想要使 侧边栏（Sidebar）生效，需要配置 <code>themeConfig.sidebar</code>，基本的配置，需要一个包含了多个链接的数组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/page-a'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'/page-b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Explicit link text'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以省略 <code>.md</code> 拓展名，同时以 <code>/</code> 结尾的路径将会被视为 <code>*/README.md</code>，这个链接的文字将会被自动获取到（无论你是声明为页面的第一个 header，还是明确地在 <code>YAML front matter</code> 中指定页面的标题）。如果你想要显示地指定链接的文字，使用一个格式为 <code>[link, text]</code> 的数组。</p>\n<h3 id=\"嵌套的标题链接\"><a class=\"header-anchor\" href=\"#嵌套的标题链接\" aria-hidden=\"true\">#</a> 嵌套的标题链接</h3>\n<p>默认情况下，侧边栏会自动地显示由当前页面的标题（headers）组成的链接，并按照页面本身的结构进行嵌套，你可以通过 <code>themeConfig.sidebarDepth</code> 来修改它的行为。默认的深度是 <code>1</code>，它将提取到 <code>h2</code> 的标题，设置成 <code>0</code> 将会禁用标题（headers）链接，同时，最大的深度为 <code>2</code>，它将同时提取 <code>h2</code> 和 <code>h3</code> 标题。</p>\n<p>也可以使用 <code>YAML front matter</code> 来为某个页面重写此值：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\">sidebarDepth: 2\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"显示所有页面的标题链接\"><a class=\"header-anchor\" href=\"#显示所有页面的标题链接\" aria-hidden=\"true\">#</a> 显示所有页面的标题链接 <Badge text=\"0.11.0+\"/></h3>\n<p>默认情况下，侧边栏只会显示由当前活动页面的标题（headers）组成的链接，你可以将 <code>themeConfig.displayAllHeaders</code> 设置为 <code>true</code> 来显示所有页面的标题链接：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    displayAllHeaders<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 默认值：false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"活动的标题链接\"><a class=\"header-anchor\" href=\"#活动的标题链接\" aria-hidden=\"true\">#</a> 活动的标题链接</h3>\n<p>默认情况下，当用户通过滚动查看页面的不同部分时，嵌套的标题链接和 URL 中的 Hash 值会实时更新，这个行为可以通过以下的配置来禁用：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    activeHeaderLinks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值：true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>值得一提的是，当你禁用此选项时，此功能的相应脚本将不会被加载，这是我们性能优化的一个小点。</p>\n</div>\n<h3 id=\"侧边栏分组\"><a class=\"header-anchor\" href=\"#侧边栏分组\" aria-hidden=\"true\">#</a> 侧边栏分组</h3>\n<p>你可以通过使用<strong>对象</strong>来将侧边栏划分成多个组：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group 1'</span><span class=\"token punctuation\">,</span>\n        collapsable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'/'</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Group 2'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>侧边栏的每个子组默认是可折叠的，你可以设置 <code>collapsable: false</code> 来让一个组永远都是展开状态。</p>\n<h3 id=\"多个侧边栏\"><a class=\"header-anchor\" href=\"#多个侧边栏\" aria-hidden=\"true\">#</a> 多个侧边栏</h3>\n<p>如果你想为不同的页面组来显示不同的侧边栏，首先，将你的页面文件组织成下述的目录结构：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n├─ README.md\n├─ contact.md\n├─ about.md\n├─ foo/\n│  ├─ README.md\n│  ├─ one.md\n│  └─ two.md\n└─ bar/\n   ├─ README.md\n   ├─ three.md\n   └─ four.md\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>接着，遵循以下的侧边栏配置：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'/foo/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/* /foo/ */</span>\n        <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* /foo/one.html */</span>\n        <span class=\"token string\">'two'</span>   <span class=\"token comment\">/* /foo/two.html */</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'/bar/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">/* /bar/ */</span>\n        <span class=\"token string\">'three'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* /bar/three.html */</span>\n        <span class=\"token string\">'four'</span>   <span class=\"token comment\">/* /bar/four.html */</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// fallback</span>\n      <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">/* / */</span>\n        <span class=\"token string\">'contact'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* /contact.html */</span>\n        <span class=\"token string\">'about'</span>    <span class=\"token comment\">/* /about.html */</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">WARNING</p>\n<p>确保 fallback 侧边栏被最后定义。VuePress 会按顺序遍历侧边栏配置来寻找匹配的配置。</p>\n</div>\n<h3 id=\"自动生成侧栏\"><a class=\"header-anchor\" href=\"#自动生成侧栏\" aria-hidden=\"true\">#</a> 自动生成侧栏</h3>\n<p>如果你希望自动生成一个仅仅包含了当前页面标题（headers）链接的侧边栏，你可以通过 <code>YAML front matter</code> 来实现：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> auto\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你也可以通过配置来在所有页面中启用它：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在 <router-link to=\"./../guide/i18n.html\">多语言</router-link> 模式下, 你也可以将其应用到某一特定的语言下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'/zh/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n       sidebar<span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"禁用侧边栏\"><a class=\"header-anchor\" href=\"#禁用侧边栏\" aria-hidden=\"true\">#</a> 禁用侧边栏</h3>\n<p>你可以通过 <code>YAML front matter</code> 来禁用指定页面的侧边栏：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"搜索框\"><a class=\"header-anchor\" href=\"#搜索框\" aria-hidden=\"true\">#</a> 搜索框</h2>\n<h3 id=\"内置搜索\"><a class=\"header-anchor\" href=\"#内置搜索\" aria-hidden=\"true\">#</a> 内置搜索</h3>\n<p>你可以通过设置 <code>themeConfig.search: false</code> 来禁用默认的搜索框，或是通过 <code>themeConfig.searchMaxSuggestions</code> 来调整默认搜索框显示的搜索结果数量：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    search<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    searchMaxSuggestions<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>内置搜索只会为页面的标题、<code>h2</code> 和 <code>h3</code> 构建搜索索引，如果你需要全文搜索，你可以使用 <a href=\"#Algolia-%E6%90%9C%E7%B4%A2\">Algolia 搜索</a>。</p>\n</div>\n<h3 id=\"algolia-搜索\"><a class=\"header-anchor\" href=\"#algolia-搜索\" aria-hidden=\"true\">#</a> Algolia 搜索</h3>\n<p>你可以通过 <code>themeConfig.algolia</code> 选项来用 <a href=\"https://community.algolia.com/studyearch/\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia 搜索<OutboundLink/></a> 替换内置的搜索框。要启用 Algolia 搜索，你需要至少提供 <code>apiKey</code> 和 <code>indexName</code>：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    algolia<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      apiKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;API_KEY>'</span><span class=\"token punctuation\">,</span>\n      indexName<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;INDEX_NAME>'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>不同于开箱即用的 <a href=\"#%E5%86%85%E7%BD%AE%E6%90%9C%E7%B4%A2\">内置搜索</a>，<a href=\"https://community.algolia.com/studyearch/\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia 搜索<OutboundLink/></a> 需要你在使用之前将你的网站提交给它们用于创建索引。</p>\n</div>\n<p>更多选项请参考 <a href=\"https://github.com/algolia/studyearch#studyearch-options\" target=\"_blank\" rel=\"noopener noreferrer\">Algolia studyearch 的文档<OutboundLink/></a>。</p>\n<h2 id=\"最后更新时间\"><a class=\"header-anchor\" href=\"#最后更新时间\" aria-hidden=\"true\">#</a> 最后更新时间</h2>\n<p>你可以通过 <code>themeConfig.lastUpdated</code> 选项来获取每个文件最后一次 <code>git</code> 提交的 UNIX 时间戳(ms)，同时它将以合适的日期格式显示在每一页的底部：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    lastUpdated<span class=\"token punctuation\">:</span> <span class=\"token string\">'Last Updated'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// string | boolean</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>请注意，<code>themeConfig.lastUpdated</code> 默认是关闭的，如果给定一个字符串，它将会作为前缀显示（默认值是：<code>Last Updated</code>）。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">使用须知</p>\n<p>由于 <code>lastUpdated</code> 是基于 <code>git</code> 的, 所以你只能在一个基于 <code>git</code> 的项目中启用它。</p>\n</div>\n<h2 id=\"service-worker\"><a class=\"header-anchor\" href=\"#service-worker\" aria-hidden=\"true\">#</a> Service Worker</h2>\n<p><code>themeConfig.serviceWorker</code> 允许你去配置 Service Worker。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>请不要将本选项与 <router-link to=\"./../config/#serviceworker\">Config &gt; serviceWorker</router-link> 混淆，<router-link to=\"./../config/#serviceworker\">Config &gt; serviceWorker</router-link> 是网站级别的配置，而本选项是主题级别的配置。</p>\n</div>\n<h3 id=\"刷新内容的弹窗\"><a class=\"header-anchor\" href=\"#刷新内容的弹窗\" aria-hidden=\"true\">#</a> 刷新内容的弹窗 <Badge text=\"0.13.0+\"/> <Badge text=\"beta\" type=\"warn\"/></h3>\n<p>开启 <code>themeConfig.serviceWorker.updatePopup</code> 选项，将开启一个能够刷新内容的弹窗。当网站更新（即 Service Worker 更新）时，它会提供一个 <code>refresh</code> 按钮，允许用户立刻刷新内容。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">提示</p>\n<p>如果没有 <code>refresh</code> 按钮，新的 service worker 将在所有的 <a href=\"https://developer.mozilla.org/en-US/study/Web/API/Clients\" target=\"_blank\" rel=\"noopener noreferrer\">clients<OutboundLink/></a> 关闭后才会处于活动状态。这意味着访问者在关闭你网站的所有标签之前将无法看到新内容。但是，<code>refresh</code> 按钮可以立即激活新的 Service Worker。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    serviceWorker<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      updatePopup<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// Boolean | Object, 默认值是 undefined.</span>\n      <span class=\"token comment\">// 如果设置为 true, 默认的文本配置将是: </span>\n      <span class=\"token comment\">// updatePopup: { </span>\n      <span class=\"token comment\">//    message: \"New content is available.\", </span>\n      <span class=\"token comment\">//    buttonText: \"Refresh\" </span>\n      <span class=\"token comment\">// }</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"上-下一篇链接\"><a class=\"header-anchor\" href=\"#上-下一篇链接\" aria-hidden=\"true\">#</a> 上 / 下一篇链接</h2>\n<p>上一篇和下一篇文章的链接将会自动地根据当前页面的侧边栏的顺序来获取。你也可以使用 <code>YAML front matter</code> 来明确地重写或者禁用它：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">prev</span><span class=\"token punctuation\">:</span> ./some<span class=\"token punctuation\">-</span>other<span class=\"token punctuation\">-</span>page\n<span class=\"token key atrule\">next</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"git-仓库和编辑链接\"><a class=\"header-anchor\" href=\"#git-仓库和编辑链接\" aria-hidden=\"true\">#</a> Git 仓库和编辑链接</h2>\n<p>当你提供了 <code>themeConfig.repo</code> 选项，将会自动在每个页面的导航栏生成生成一个 GitHub 链接，以及在页面的底部生成一个 <code>&quot;Edit this page&quot;</code> 链接。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// .vuepress/config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 假定是 GitHub. 同时也可以是一个完整的 GitLab URL</span>\n    repo<span class=\"token punctuation\">:</span> <span class=\"token string\">'vuejs/vuepress'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 自定义仓库链接文字。默认从 `themeConfig.repo` 中自动推断为</span>\n    <span class=\"token comment\">// \"GitHub\"/\"GitLab\"/\"Bitbucket\" 其中之一，或是 \"Source\"。</span>\n    repoLabel<span class=\"token punctuation\">:</span> <span class=\"token string\">'查看源码'</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// 以下为可选的编辑链接选项</span>\n\n    <span class=\"token comment\">// 假如你的文档仓库和项目本身不在一个仓库：</span>\n    studyRepo<span class=\"token punctuation\">:</span> <span class=\"token string\">'vuejs/vuepress'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 假如文档不是放在仓库的根目录下：</span>\n    studyDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 假如文档放在一个特定的分支下：</span>\n    studyBranch<span class=\"token punctuation\">:</span> <span class=\"token string\">'master'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 默认是 false, 设置为 true 来启用</span>\n    editLinks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 默认为 \"Edit this page\"</span>\n    editLinkText<span class=\"token punctuation\">:</span> <span class=\"token string\">'帮助我们改善此页面！'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以通过 <code>YAML front matter</code> 来禁用指定页面的编辑链接：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">editLink</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"简单的-css-覆盖\"><a class=\"header-anchor\" href=\"#简单的-css-覆盖\" aria-hidden=\"true\">#</a> 简单的 CSS 覆盖</h2>\n<p>如果你只是希望应用一些简单的 overrides 到默认主题的样式上，你可以创建一个 <code>.vuepress/override.styl</code> 文件，这是一个 <a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Stylus<OutboundLink/></a> 文件，但是你仍然可以使用普通的 CSS 语法。</p>\n<p>这里有一些你可以调整的颜色变量：</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// showing default values</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$accentColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#3eaf7c</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#2c3e50</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$borderColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#eaecef</span></span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$codeBgColor</span> <span class=\"token operator\">=</span> <span class=\"token hexcode\">#282c34</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"低版本存在的问题\"><a class=\"header-anchor\" href=\"#低版本存在的问题\" aria-hidden=\"true\">#</a> 低版本存在的问题 <Badge text=\"< 0.12.0\" type='error'/></h3>\n<p>为了 override 上述提及的 <a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Stylus<OutboundLink/></a> 默认样式常量，<code>override.styl</code> 将会在默认主题的 <code>config.styl</code> 的末尾被导入。但是，由于 <code>config.styl</code> 可能会被多个文件导入，所以，一旦你在这里写样式，你的样式将会被重复多次。参考： <a href=\"https://github.com/vuejs/vuepress/issues/637\" target=\"_blank\" rel=\"noopener noreferrer\">#637<OutboundLink/></a>。</p>\n<h3 id=\"将你的样式迁移到-style-styl\"><a class=\"header-anchor\" href=\"#将你的样式迁移到-style-styl\" aria-hidden=\"true\">#</a> 将你的样式迁移到 <code>style.styl</code> <Badge text=\"0.12.0+\"/></h3>\n<p>事实上，<code>stylus 常量的 override</code> 应该在编译所有 Stylus 文件之前完成；而用户额外的 CSS 样式应该生成在最终样式文件的末尾。因此，这两项职责不应该由同一个 stylus 文件来完成。</p>\n<p>从 <code>0.12.0</code> 开始，我们将 <code>override.styl</code> 拆分为两个 API：<code>override.styl</code> 和 <code>style.styl</code>。如果你过去在 <code>override.styl</code> 中书写了样式，如：</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/override.styl</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> red </span><span class=\"token comment\">// stylus 常量的 override</span>\n\n<span class=\"token selector\">#my-style <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 你的样式</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你将需要将你的样式部分分离到 <code>style.styl</code>:</p>\n<!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/override.styl，应该仅仅包含 stylus 常量的 override</span>\n<span class=\"token variable-declaration\"><span class=\"token variable\">$textColor</span> <span class=\"token operator\">=</span> red</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-stylus extra-class\"><!--afterbegin--><pre v-pre class=\"language-stylus\"><code><span class=\"token comment\">// .vuepress/style.styl，你的样式</span>\n<span class=\"token selector\">#my-style <span class=\"token punctuation\">{</span></span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"自定义页面类\"><a class=\"header-anchor\" href=\"#自定义页面类\" aria-hidden=\"true\">#</a> 自定义页面类</h2>\n<p>有时候你可能需要为特定页面添加一个 CSS 类名，以方便针对该页面添加一些专门的 CSS。这种情况下你可以在该页面的 YAML front matter 中声明一个 <code>pageClass</code>：</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">pageClass</span><span class=\"token punctuation\">:</span> custom<span class=\"token punctuation\">-</span>page<span class=\"token punctuation\">-</span>class\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后你就可以写专门针对该页面的 CSS 了：</p>\n<!--beforebegin--><div class=\"language-css extra-class\"><!--afterbegin--><pre v-pre class=\"language-css\"><code><span class=\"token comment\">/* .vuepress/override.styl */</span>\n\n<span class=\"token selector\">.theme-container.custom-page-class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 特定页面的 CSS */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"特定页面的自定义布局\"><a class=\"header-anchor\" href=\"#特定页面的自定义布局\" aria-hidden=\"true\">#</a> 特定页面的自定义布局</h2>\n<p>默认情况下，每个 <code>*.md</code> 文件将会被渲染在一个 <code>&lt;div class=&quot;page&quot;&gt;</code> 容器中，同时还有侧边栏、自动生成的编辑链接，以及上 / 下一篇文章的链接。如果你想要使用一个完全自定义的组件来代替当前的页面（而只保留导航栏），你可以再次使用 <code>YAML front matter</code> 来指定这个组件。</p>\n<!--beforebegin--><div class=\"language-yaml extra-class\"><!--afterbegin--><pre v-pre class=\"language-yaml\"><code><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> SpecialLayout\n<span class=\"token punctuation\">---</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这将会为当前的页面渲染 <code>.vuepress/components/SpecialLayout.vue</code> 布局。</p>\n</div>\n",null]}